// ÁªìÊûúÈ°µ
const authService = require('../../services/auth.js');
const { IMAGE_URLS } = require('../../constants/index.js');
const { t, getLang } = require('../../utils/i18n.js');

Page({
  data: {
    result: null,
    isLoggedIn: false,
    imageUrls: IMAGE_URLS,
    posterConfig: null,
    showProfileSetupModal: false,
    feedbackRating: 0,
    feedbackContent: '',
    submittingFeedback: false,
    // Âä†ËΩΩÁä∂ÊÄÅ
    loading: true,
    // ËßÜÈ¢ëÁõ∏ÂÖ≥
    isVideoType: false,
    videoTaskId: null,
    videoUrl: null,
    videoStatus: 'pending', // pending, processing, completed, failed
    // ÁñèÂØºÊÄßÈóÆÈ¢òÁõ∏ÂÖ≥
    answer1: '',
    answer2: '',
    savingAnswers: false,
    // ÊäòÂè†Èù¢ÊùøÁõ∏ÂÖ≥
    activeNames: [], // ÈªòËÆ§ÂÖ®ÈÉ®Êî∂Áº©
    // ÂèçÈ¶àÁõ∏ÂÖ≥
    feedbackSubmitted: false, // ÂèçÈ¶àÊòØÂê¶Â∑≤Êèê‰∫§
    // Â§öËØ≠Ë®ÄÁõ∏ÂÖ≥
    language: 'zh',
    i18n: {}
  },

  onLoad(options) {
    console.log('ÁªìÊûúÈ°µÂä†ËΩΩ', options);
    console.log('ËÉåÊôØÂõæÁâáURL:', this.data.imageUrls.BACKGROUNDS.DREAM_ANALYSIS_RESULT);
    
    // ÂàùÂßãÂåñÂ§öËØ≠Ë®Ä
    this.initI18n();
    
    // Ê£ÄÊü•ÁôªÂΩïÁä∂ÊÄÅ
    this.checkLoginStatus();
    
    if (options.data) {
      try {
        const result = JSON.parse(decodeURIComponent(options.data));
        console.log('Ëß£ÊûêÁªìÊûúÊï∞ÊçÆ:', result);
        console.log('analysisId:', result.analysisId);
        console.log('analysisIdÁ±ªÂûã:', typeof result.analysisId);
        console.log('generationType:', result.generationType);
        
        // Á°Æ‰øùanalysisIdÊòØÊï∞Â≠óÁ±ªÂûã
        if (result.analysisId) {
          result.analysisId = parseInt(result.analysisId);
          console.log('ËΩ¨Êç¢ÂêéÁöÑanalysisId:', result.analysisId);
        }
        
        // Ê†ºÂºèÂåñËß£ÊûêÂÜÖÂÆπÔºåËøõË°åÊô∫ËÉΩÂàÜÊÆµ
        if (result.interpretation) {
          result.interpretationParagraphs = this.formatInterpretation(result.interpretation);
        }
        
        // Ëß£ÊûêÁñèÂØºÊÄßÈóÆÈ¢òJSON
        if (result.guidingQuestionsJson) {
          try {
            console.log('result.js - ÂéüÂßãguidingQuestionsJson:', result.guidingQuestionsJson);
            const guidingQuestions = JSON.parse(result.guidingQuestionsJson);
            console.log('result.js - Ëß£ÊûêÂêéÁöÑguidingQuestions:', guidingQuestions);
            
            // Â§ÑÁêÜÈóÆÈ¢ò1ÂíåÈóÆÈ¢ò2Ôºà‰∏ç‰æùËµñÈ°∫Â∫èÔºâ
            const questionKeys = Object.keys(guidingQuestions);
            let question1Processed = false;
            let question2Processed = false;
            
            for (const key of questionKeys) {
              if (key.startsWith('question') && guidingQuestions[key]) {
                const questionData = guidingQuestions[key];
                const question = questionData.question;
                const answer = questionData.answer;
                
                if (!question1Processed) {
                  result.guidingQuestion1 = question;
                  result.guidingQuestion1Answer = answer || '';
                  if (answer) {
                    result.guidingQuestion1 = question + '\n\nüí≠ ' + this.data.i18n.result.myThinking + 'Ôºö\n' + answer;
                  }
                  question1Processed = true;
                } else if (!question2Processed) {
                  result.guidingQuestion2 = question;
                  result.guidingQuestion2Answer = answer || '';
                  if (answer) {
                    result.guidingQuestion2 = question + '\n\nüí≠ ' + this.data.i18n.result.myThinking + 'Ôºö\n' + answer;
                  }
                  question2Processed = true;
                }
              }
            }
          } catch (error) {
            console.error('result.js - Ëß£ÊûêÁñèÂØºÊÄßÈóÆÈ¢òJSONÂ§±Ë¥•:', error);
            result.guidingQuestion1 = '';
            result.guidingQuestion2 = '';
          }
        } else {
          console.log('result.js - Ê≤°ÊúâguidingQuestionsJsonÂ≠óÊÆµ');
        }
        
        // Ê£ÄÊü•ÊòØÂê¶ÊòØËßÜÈ¢ëÁ±ªÂûã
        const isVideoType = result.generationType === 'video';
        const videoTaskId = result.videoTaskId || null;
        
        if (isVideoType && videoTaskId) {
          console.log('ËßÜÈ¢ëÁ±ªÂûãÔºå‰ªªÂä°ID:', videoTaskId);
          this.setData({
            isVideoType: true,
            videoTaskId: videoTaskId,
            videoStatus: 1 // Êîπ‰∏∫Êï∞Â≠ó 1ÔºåË°®Á§∫ËøõË°å‰∏≠
          });
          // ÂºÄÂßãËΩÆËØ¢ËßÜÈ¢ëÁä∂ÊÄÅ
          this.startVideoPolling();
        }
        
        // È¢ÑÂä†ËΩΩAIÂõæÁâáÔºåËΩ¨‰∏∫Êú¨Âú∞‰∏¥Êó∂Ë∑ØÂæÑÔºåÈÅøÂÖçË∑®Âüü/ÂüüÂêçËß£ÊûêÈóÆÈ¢ò
        // Âè™ÊúâÊñáÁîüÂõæÊ®°ÂºèÊâçÂ§ÑÁêÜÂõæÁâáÔºåÊñáÁîüËßÜÈ¢ë‰∏çÈúÄË¶ÅÂõæÁâá
        if (!isVideoType && result.imageUrl) {
          this.ensureLocalImage(result.imageUrl).then(localPath => {
            if (localPath) {
              result.imageUrl = localPath;
            }
            this.setData({ result, loading: false });
          }).catch(() => {
            this.setData({ result, loading: false });
          });
        } else {
          this.setData({ result, loading: false });
        }
      } catch (error) {
        console.error('Ëß£ÊûêÁªìÊûúÊï∞ÊçÆÂ§±Ë¥•:', error);
        this.setData({ loading: false });
        wx.showToast({
          title: this.data.i18n.result.dataError,
          icon: 'error'
        });
      }
    }
  },

  /**
   * ÂàùÂßãÂåñÂ§öËØ≠Ë®Ä
   */
  initI18n() {
    const language = getLang();
    this.setData({
      language: language,
      i18n: {
        result: {
          dataError: t('result.dataError'),
          videoNotGenerated: t('result.videoNotGenerated'),
          videoGenerationComplete: t('result.videoGenerationComplete'),
          videoGenerationFailed: t('result.videoGenerationFailed'),
          downloading: t('result.downloading'),
          saveSuccess: t('result.saveSuccess'),
          saveFailed: t('result.saveFailed'),
          needAuth: t('result.needAuth'),
          allowSaveVideo: t('result.allowSaveVideo'),
          goToSettings: t('result.goToSettings'),
          downloadFailed: t('result.downloadFailed'),
          dreamAnalysisResult: t('result.dreamAnalysisResult'),
          dreamAnalysis: t('result.dreamAnalysis'),
          shareToFriends: t('result.shareToFriends'),
          saveToAlbum: t('result.saveToAlbum'),
          copyLink: t('result.copyLink'),
          copied: t('result.copied'),
          publishToCommunity: t('result.publishToCommunity'),
          confirmPublish: t('result.confirmPublish'),
          publish: t('result.publish'),
          cancel: t('result.cancel'),
          dataErrorMissingId: t('result.dataErrorMissingId'),
          publishing: t('result.publishing'),
          publishSuccess: t('result.publishSuccess'),
          publishFailed: t('result.publishFailed'),
          loginRequired: t('result.loginRequired'),
          loginRequiredForPublish: t('result.loginRequiredForPublish'),
          goToLogin: t('result.goToLogin'),
          noData: t('result.noData'),
          generatingPoster: t('result.generatingPoster'),
          posterComponentNotFound: t('result.posterComponentNotFound'),
          generationFailed: t('result.generationFailed'),
          noKeywords: t('result.noKeywords'),
          noDreamDescription: t('result.noDreamDescription'),
          noDreamAnalysis: t('result.noDreamAnalysis'),
          appName: t('result.appName'),
          aiDreamAnalysis: t('result.aiDreamAnalysis'),
          dreamContent: t('result.dreamContent'),
          keywords: t('result.keywords'),
          dreamAnalysis: t('result.dreamAnalysis'),
          scanForMore: t('result.scanForMore'),
          longPressToScan: t('result.longPressToScan'),
          aiGeneratedPoster: t('result.aiGeneratedPoster'),
          needAuthForImage: t('result.needAuthForImage'),
          allowSaveImage: t('result.allowSaveImage'),
          generationFailed: t('result.generationFailed'),
          networkFailed: t('result.networkFailed'),
          serverConnectionFailed: t('result.serverConnectionFailed'),
          tempFileFailed: t('result.tempFileFailed'),
          pleaseAnswerAtLeastOne: t('result.pleaseAnswerAtLeastOne'),
          thinkingSaved: t('result.thinkingSaved'),
          saveFailed: t('result.saveFailed'),
          loginRequiredForSave: t('result.loginRequiredForSave'),
          pleaseSelectRatingOrFeedback: t('result.pleaseSelectRatingOrFeedback'),
          feedbackSubmitSuccess: t('result.feedbackSubmitSuccess'),
          feedbackSubmitFailed: t('result.feedbackSubmitFailed'),
          loginRequiredForFeedback: t('result.loginRequiredForFeedback'),
          submitFailed: t('result.submitFailed'),
          myThinking: t('result.myThinking'),
          aiDreamVideo: t('result.aiDreamVideo'),
          clickToViewVideo: t('result.clickToViewVideo'),
          loading: t('result.loading'),
          aiDisclaimer: t('result.aiDisclaimer'),
          guidingQuestions: t('result.guidingQuestions'),
          questionsIntro: t('result.questionsIntro'),
          question1: t('result.question1'),
          question2: t('result.question2'),
          answerPlaceholder: t('result.answerPlaceholder'),
          saveAnswers: t('result.saveAnswers'),
          saving: t('result.saving'),
          aiImage: t('result.aiImage'),
          videoGenerating: t('result.videoGenerating'),
          videoGeneratingTip: t('result.videoGeneratingTip'),
          videoFailed: t('result.videoFailed'),
          videoFailedTip: t('result.videoFailedTip'),
          downloadVideo: t('result.downloadVideo'),
          generatePoster: t('result.generatePoster'),
          rateUs: t('result.rateUs'),
          ratingLabel: t('result.ratingLabel'),
          score: t('result.score'),
          selectRating: t('result.selectRating'),
          feedbackLabel: t('result.feedbackLabel'),
          feedbackPlaceholder: t('result.feedbackPlaceholder'),
          submitFeedback: t('result.submitFeedback'),
          submitting: t('result.submitting'),
          thankYouTitle: t('result.thankYouTitle'),
          thankYouText: t('result.thankYouText'),
          noResult: t('result.noResult')
        },
        app: {
          shareTitle: t('app.shareTitle'),
          timelineTitle: t('app.timelineTitle')
        }
      }
    });
    wx.setNavigationBarTitle({ title: t('pageTitle.result') });
    
    // ÁõëÂê¨ËØ≠Ë®ÄÂàáÊç¢‰∫ã‰ª∂
    wx.eventBus && wx.eventBus.on('languageChanged', () => {
      // ÈáçÊñ∞ËÆæÁΩÆÈ°µÈù¢Ê†áÈ¢ò
      wx.setNavigationBarTitle({ title: t('pageTitle.result') });
    });
  },

  onShow() {
    console.log('ÁªìÊûúÈ°µÊòæÁ§∫');
    this.checkLoginStatus();
    
    // Âº∫Âà∂Êõ¥Êñ∞Ê†áÈ¢ò
    this.initI18n();
    const newTitle = t('pageTitle.result');
    console.log('ÁªìÊûúÈ°µËÆæÁΩÆÊñ∞Ê†áÈ¢ò:', newTitle);
    wx.setNavigationBarTitle({ title: newTitle });
  },

  onHide() {
    console.log('ÁªìÊûúÈ°µÈöêËóè');
    // ÂÅúÊ≠¢ËßÜÈ¢ëËΩÆËØ¢
    this.stopVideoPolling();
  },

  onUnload() {
    console.log('ÁªìÊûúÈ°µÂç∏ËΩΩ');
    // ÂÅúÊ≠¢ËßÜÈ¢ëËΩÆËØ¢
    this.stopVideoPolling();
  },

  /**
   * Ê£ÄÊü•ÁôªÂΩïÁä∂ÊÄÅ
   */
  checkLoginStatus() {
    const isLoggedIn = authService.checkLoginStatus();
    this.setData({
      isLoggedIn: isLoggedIn
    });
  },

  /**
   * ÂºÄÂßãËßÜÈ¢ëÁä∂ÊÄÅËΩÆËØ¢ÔºàÊØè15Áßí‰∏ÄÊ¨°Ôºâ
   */
  startVideoPolling() {
    console.log('ÂºÄÂßãËßÜÈ¢ëËΩÆËØ¢');
    // ÂÖàÁ´ãÂç≥Êü•ËØ¢‰∏ÄÊ¨°
    this.pollVideoStatus();
    // ÁÑ∂ÂêéÊØè15ÁßíÊü•ËØ¢‰∏ÄÊ¨°
    this.videoPollingTimer = setInterval(() => {
      this.pollVideoStatus();
    }, 15000); // 15Áßí
  },

  /**
   * ÂÅúÊ≠¢ËßÜÈ¢ëËΩÆËØ¢
   */
  stopVideoPolling() {
    if (this.videoPollingTimer) {
      console.log('ÂÅúÊ≠¢ËßÜÈ¢ëËΩÆËØ¢');
      clearInterval(this.videoPollingTimer);
      this.videoPollingTimer = null;
    }
  },

  /**
   * ËΩÆËØ¢ËßÜÈ¢ëÁä∂ÊÄÅ
   */
  async pollVideoStatus() {
    const { videoTaskId, videoStatus } = this.data;
    
    // Â¶ÇÊûú‰ªªÂä°Â∑≤ÂÆåÊàêÊàñÂ§±Ë¥•ÔºåÂÅúÊ≠¢ËΩÆËØ¢
    if (videoStatus === 2 || videoStatus === 3) {
      this.stopVideoPolling();
      return;
    }

    if (!videoTaskId) {
      console.error('Áº∫Â∞ëËßÜÈ¢ë‰ªªÂä°ID');
      return;
    }

    try {
      console.log('Êü•ËØ¢ËßÜÈ¢ëÁä∂ÊÄÅ, taskId:', videoTaskId);
      const dreamService = require('../../services/dream.js');
      const response = await dreamService.getVideoStatus(videoTaskId);
      
      console.log('ËßÜÈ¢ëÁä∂ÊÄÅÂìçÂ∫î:', response);

      if (response && response.code === 0 && response.data) {
        const { status, videoUrl } = response.data;
        
        console.log('ËßÜÈ¢ëÁä∂ÊÄÅ:', status, 'ËßÜÈ¢ëURL:', videoUrl);

        // Êõ¥Êñ∞Áä∂ÊÄÅ - Áõ¥Êé•‰ΩøÁî®ÂêéÁ´ØËøîÂõûÁöÑÊï∞Â≠óÁä∂ÊÄÅ
        const updateData = {
          videoStatus: status
        };

        if (status === 2 && videoUrl) {
          updateData.videoUrl = videoUrl;
          // ÂÅúÊ≠¢ËΩÆËØ¢
          this.stopVideoPolling();
          // ÊèêÁ§∫Áî®Êà∑ËßÜÈ¢ëÂ∑≤ÁîüÊàê
          wx.showToast({
            title: this.data.i18n.result.videoGenerationComplete,
            icon: 'success',
            duration: 2000
          });
        } else if (status === 3) {
          // ÂÅúÊ≠¢ËΩÆËØ¢
          this.stopVideoPolling();
          wx.showToast({
            title: this.data.i18n.result.videoGenerationFailed,
            icon: 'error',
            duration: 2000
          });
        }

        this.setData(updateData);
      }
    } catch (error) {
      console.error('Êü•ËØ¢ËßÜÈ¢ëÁä∂ÊÄÅÂ§±Ë¥•:', error);
      // ‰∏ç‰∏≠Êñ≠ËΩÆËØ¢ÔºåÁªßÁª≠Â∞ùËØï
    }
  },

  /**
   * È¢ÑËßàËßÜÈ¢ë
   */
  onPreviewVideo() {
    const { videoUrl } = this.data;
    if (!videoUrl) {
      wx.showToast({
        title: this.data.i18n.result.videoNotGenerated,
        icon: 'none'
      });
      return;
    }

    // ‰ΩøÁî®Â∞èÁ®ãÂ∫èÁöÑËßÜÈ¢ëÈ¢ÑËßà
    wx.previewMedia({
      sources: [{
        url: videoUrl,
        type: 'video'
      }],
      current: 0
    });
  },

  /**
   * ‰∏∫ËßÜÈ¢ëÁîüÊàêÁ¨¨‰∏ÄÂ∏ßÂ∞ÅÈù¢Âõæ
   */
  generateVideoThumbnail(videoUrl) {
    return new Promise((resolve, reject) => {
      try {
        console.log('ÂºÄÂßãÁîüÊàêËßÜÈ¢ëÁ¨¨‰∏ÄÂ∏ß:', videoUrl);
        
        // ‰ΩøÁî®ÂæÆ‰ø°Â∞èÁ®ãÂ∫èÁöÑ getVideoInfo API Ëé∑ÂèñËßÜÈ¢ë‰ø°ÊÅØ
        wx.getVideoInfo({
          src: videoUrl,
          success: (res) => {
            console.log('ËßÜÈ¢ë‰ø°ÊÅØËé∑ÂèñÊàêÂäü:', res);
            
            // Â¶ÇÊûúËßÜÈ¢ëÊúâ poster Â±ûÊÄßÔºåÁõ¥Êé•‰ΩøÁî®
            if (res.poster) {
              console.log('‰ΩøÁî®ËßÜÈ¢ëËá™Â∏¶ÁöÑposter:', res.poster);
              resolve(res.poster);
              return;
            }
            
            // Â¶ÇÊûúÊ≤°ÊúâposterÔºåÂ∞ùËØï‰ΩøÁî® createVideoContext Ëé∑ÂèñÁ¨¨‰∏ÄÂ∏ß
            this.getVideoFirstFrame(videoUrl).then(resolve).catch((error) => {
              console.log('Ëé∑ÂèñËßÜÈ¢ëÁ¨¨‰∏ÄÂ∏ßÂ§±Ë¥•Ôºå‰ΩøÁî®ÈªòËÆ§ÂõæÁâá:', error);
              // ÈôçÁ∫ßÂà∞ÈªòËÆ§ÂõæÁâá
              this.getDefaultThumbnail().then(resolve).catch(reject);
            });
          },
          fail: (error) => {
            console.log('Ëé∑ÂèñËßÜÈ¢ë‰ø°ÊÅØÂ§±Ë¥•:', error);
            // ÈôçÁ∫ßÂà∞ÈªòËÆ§ÂõæÁâá
            this.getDefaultThumbnail().then(resolve).catch(reject);
          }
        });
      } catch (error) {
        console.error('ÁîüÊàêËßÜÈ¢ëÂ∞ÅÈù¢ÂºÇÂ∏∏:', error);
        // ÈôçÁ∫ßÂà∞ÈªòËÆ§ÂõæÁâá
        this.getDefaultThumbnail().then(resolve).catch(reject);
      }
    });
  },

  /**
   * Ëé∑ÂèñËßÜÈ¢ëÁ¨¨‰∏ÄÂ∏ß
   */
  getVideoFirstFrame(videoUrl) {
    return new Promise((resolve, reject) => {
      try {
        // ÂàõÂª∫‰∏Ä‰∏™‰∏¥Êó∂ÁöÑvideoÂÖÉÁ¥†Êù•Ëé∑ÂèñÁ¨¨‰∏ÄÂ∏ß
        const query = wx.createSelectorQuery();
        query.select('#video-canvas').fields({ node: true, size: true }).exec((res) => {
          if (res[0]) {
            const canvas = res[0].node;
            const ctx = canvas.getContext('2d');
            
            // ËÆæÁΩÆÁîªÂ∏ÉÂ∞∫ÂØ∏
            canvas.width = 400;
            canvas.height = 400;
            
            // ÂàõÂª∫videoÂÖÉÁ¥†
            const video = canvas.createVideo();
            video.src = videoUrl;
            video.crossOrigin = 'anonymous';
            
            video.onloadeddata = () => {
              try {
                // ÁªòÂà∂ËßÜÈ¢ëÁ¨¨‰∏ÄÂ∏ßÂà∞canvas
                ctx.drawImage(video, 0, 0, 400, 400);
                
                // ÂØºÂá∫‰∏∫ÂõæÁâá
                wx.canvasToTempFilePath({
                  canvas: canvas,
                  success: (res) => {
                    console.log('ËßÜÈ¢ëÁ¨¨‰∏ÄÂ∏ßÁîüÊàêÊàêÂäü:', res.tempFilePath);
                    resolve(res.tempFilePath);
                  },
                  fail: (err) => {
                    console.error('ÂØºÂá∫ËßÜÈ¢ëÁ¨¨‰∏ÄÂ∏ßÂ§±Ë¥•:', err);
                    reject(err);
                  }
                });
              } catch (error) {
                console.error('ÁªòÂà∂ËßÜÈ¢ëÁ¨¨‰∏ÄÂ∏ßÂ§±Ë¥•:', error);
                reject(error);
              }
            };
            
            video.onerror = (error) => {
              console.error('ËßÜÈ¢ëÂä†ËΩΩÂ§±Ë¥•:', error);
              reject(error);
            };
          } else {
            reject(new Error('Canvas not found'));
          }
        });
      } catch (error) {
        console.error('Ëé∑ÂèñËßÜÈ¢ëÁ¨¨‰∏ÄÂ∏ßÂºÇÂ∏∏:', error);
        reject(error);
      }
    });
  },

  /**
   * Ëé∑ÂèñÈªòËÆ§Â∞ÅÈù¢Âõæ
   */
  getDefaultThumbnail() {
    return new Promise((resolve, reject) => {
      try {
        // ÊñπÊ°à1Ôºö‰ΩøÁî®ÈªòËÆ§Â∞ÅÈù¢Âõæ
        const defaultThumbnailUrl = this.data.imageUrls?.BACKGROUNDS?.PERSON || null;
        if (defaultThumbnailUrl) {
          this.ensureLocalImage(defaultThumbnailUrl).then(resolve).catch(() => {
            // ÊñπÊ°à2ÔºöÁîüÊàê‰∏Ä‰∏™ÁÆÄÂçïÁöÑÊñáÂ≠óÂ∞ÅÈù¢Âõæ
            this.generateTextThumbnail().then(resolve).catch(reject);
          });
        } else {
          // ÊñπÊ°à2ÔºöÁîüÊàê‰∏Ä‰∏™ÁÆÄÂçïÁöÑÊñáÂ≠óÂ∞ÅÈù¢Âõæ
          this.generateTextThumbnail().then(resolve).catch(reject);
        }
      } catch (error) {
        reject(error);
      }
    });
  },

  /**
   * ÁîüÊàêÊñáÂ≠óÂ∞ÅÈù¢Âõæ
   */
  generateTextThumbnail() {
    return new Promise((resolve, reject) => {
      try {
        const query = wx.createSelectorQuery();
        query.select('#video-canvas').fields({ node: true, size: true }).exec((res) => {
          if (res[0]) {
            const canvas = res[0].node;
            const ctx = canvas.getContext('2d');
            
            // ËÆæÁΩÆÁîªÂ∏ÉÂ∞∫ÂØ∏
            canvas.width = 400;
            canvas.height = 400;
            
            // ÁªòÂà∂ËÉåÊôØ
            ctx.fillStyle = '#8B5CF6';
            ctx.fillRect(0, 0, 400, 400);
            
            // ÁªòÂà∂ÊñáÂ≠ó
            ctx.fillStyle = '#ffffff';
            ctx.font = '32px Arial';
            ctx.textAlign = 'center';
            ctx.textBaseline = 'middle';
            ctx.fillText(this.data.i18n.result.aiDreamVideo, 200, 180);
            
            ctx.font = '24px Arial';
            ctx.fillText(this.data.i18n.result.clickToViewVideo, 200, 220);
            
            // ÂØºÂá∫‰∏∫ÂõæÁâá
            wx.canvasToTempFilePath({
              canvas: canvas,
              success: (res) => {
                resolve(res.tempFilePath);
              },
              fail: reject
            });
          } else {
            reject(new Error('Canvas not found'));
          }
        });
      } catch (error) {
        reject(error);
      }
    });
  },

  /**
   * ‰∏ãËΩΩËßÜÈ¢ëÂà∞Êú¨Âú∞
   */
  onDownloadVideo() {
    const { videoUrl } = this.data;
    if (!videoUrl) {
      wx.showToast({
        title: this.data.i18n.result.videoNotGenerated,
        icon: 'none'
      });
      return;
    }

    console.log('ÂºÄÂßã‰∏ãËΩΩËßÜÈ¢ë:', videoUrl);

    // ÂÖàÊ£ÄÊü•Áõ∏ÂÜåÊùÉÈôê
    wx.getSetting({
      success: (res) => {
        if (res.authSetting['scope.writePhotosAlbum'] === false) {
          // Áî®Êà∑‰πãÂâçÊãíÁªù‰∫ÜÊùÉÈôêÔºåÈúÄË¶ÅÂºïÂØºÂà∞ËÆæÁΩÆÈ°µÈù¢
          wx.showModal({
            title: this.data.i18n.result.needAuth,
            content: this.data.i18n.result.allowSaveVideo,
            confirmText: this.data.i18n.result.goToSettings,
            success: (modalRes) => {
              if (modalRes.confirm) {
                wx.openSetting();
              }
            }
          });
          return;
        }
        
        // ÊùÉÈôêÊú™Á°ÆÂÆöÊàñÂ∑≤ÊéàÊùÉÔºåÂÖàËØ∑Ê±ÇÊùÉÈôê
        wx.authorize({
          scope: 'scope.writePhotosAlbum',
          success: () => {
            console.log('Áõ∏ÂÜåÊùÉÈôêÂ∑≤ÊéàÊùÉÔºåÂºÄÂßã‰∏ãËΩΩËßÜÈ¢ë');
            this.startVideoDownload(videoUrl);
          },
          fail: () => {
            console.log('Áî®Êà∑ÊãíÁªù‰∫ÜÁõ∏ÂÜåÊùÉÈôê');
            wx.showModal({
              title: this.data.i18n.result.needAuth,
              content: this.data.i18n.result.allowSaveVideo,
              confirmText: this.data.i18n.result.goToSettings,
              success: (modalRes) => {
                if (modalRes.confirm) {
                  wx.openSetting();
                }
              }
            });
          }
        });
      }
    });
  },

  /**
   * ÂºÄÂßã‰∏ãËΩΩËßÜÈ¢ë
   */
  startVideoDownload(videoUrl) {
    // ÊòæÁ§∫‰∏ãËΩΩÊèêÁ§∫
    wx.showLoading({
      title: this.data.i18n.result.downloading
    });

    // ‰∏ãËΩΩËßÜÈ¢ëÊñá‰ª∂
    wx.downloadFile({
      url: videoUrl,
      success: (res) => {
        console.log('ËßÜÈ¢ë‰∏ãËΩΩÂìçÂ∫î:', res);
        wx.hideLoading();
        
        if (res.statusCode === 200) {
          console.log('ËßÜÈ¢ë‰∏ãËΩΩÊàêÂäüÔºåÂºÄÂßã‰øùÂ≠òÂà∞Áõ∏ÂÜå');
          // ‰øùÂ≠òÂà∞Áõ∏ÂÜå
          wx.saveVideoToPhotosAlbum({
            filePath: res.tempFilePath,
            success: () => {
              console.log('ËßÜÈ¢ë‰øùÂ≠òÂà∞Áõ∏ÂÜåÊàêÂäü');
              wx.showToast({
                title: this.data.i18n.result.saveSuccess,
                icon: 'success',
                duration: 2000
              });
            },
            fail: (err) => {
              console.error('‰øùÂ≠òËßÜÈ¢ëÂ§±Ë¥•:', err);
              if (err.errMsg.includes('auth deny')) {
                console.log('Áî®Êà∑ÊãíÁªù‰∫ÜÁõ∏ÂÜåÊùÉÈôê');
                wx.showModal({
                  title: this.data.i18n.result.needAuth,
                  content: this.data.i18n.result.allowSaveVideo,
                  confirmText: this.data.i18n.result.goToSettings,
                  success: (modalRes) => {
                    if (modalRes.confirm) {
                      wx.openSetting();
                    }
                  }
                });
              } else {
                console.error('‰øùÂ≠òËßÜÈ¢ëÂ§±Ë¥•ÔºåÈîôËØØ‰ø°ÊÅØ:', err.errMsg);
                wx.showToast({
                  title: this.data.i18n.result.saveFailed,
                  icon: 'error',
                  duration: 2000
                });
              }
            }
          });
        } else {
          console.error('ËßÜÈ¢ë‰∏ãËΩΩÂ§±Ë¥•ÔºåÁä∂ÊÄÅÁ†Å:', res.statusCode);
          wx.showToast({
            title: this.data.i18n.result.downloadFailed,
            icon: 'error',
            duration: 2000
          });
        }
      },
      fail: (err) => {
        console.error('ËßÜÈ¢ë‰∏ãËΩΩÂ§±Ë¥•ÔºåËØ¶ÁªÜÈîôËØØ:', err);
        wx.hideLoading();
        
        // Ê†πÊçÆÈîôËØØÁ±ªÂûãÊèê‰æõÊõ¥ÂÖ∑‰ΩìÁöÑÊèêÁ§∫
        let errorMessage = this.data.i18n.result.downloadFailed;
        if (err.errMsg) {
          if (err.errMsg.includes('network')) {
            errorMessage = 'ÁΩëÁªúËøûÊé•Â§±Ë¥•ÔºåËØ∑Ê£ÄÊü•ÁΩëÁªúÂêéÈáçËØï';
          } else if (err.errMsg.includes('timeout')) {
            errorMessage = '‰∏ãËΩΩË∂ÖÊó∂ÔºåËØ∑ÈáçËØï';
          } else if (err.errMsg.includes('storage')) {
            errorMessage = 'Â≠òÂÇ®Á©∫Èó¥‰∏çË∂≥ÔºåËØ∑Ê∏ÖÁêÜÂêéÈáçËØï';
          }
        }
        
        wx.showToast({
          title: errorMessage,
          icon: 'error',
          duration: 3000
        });
      }
    });
  },

  /**
   * Êô∫ËÉΩÂàÜÊÆµÂáΩÊï∞
   */
  formatInterpretation(text) {
    if (!text || typeof text !== 'string') {
      return [];
    }
    
    // Ê∏ÖÁêÜÊñáÊú¨ÔºåÂéªÈô§Â§ö‰ΩôÁ©∫Ê†º
    const cleanText = text.replace(/\s+/g, ' ').trim();
    
    // ÊåâÂè•Âè∑„ÄÅÈóÆÂè∑„ÄÅÊÑüÂèπÂè∑ÂàÜÊÆµÔºå‰ΩÜ‰øùÁïôÊ†áÁÇπÁ¨¶Âè∑
    const sentences = cleanText.split(/([„ÄÇÔºÅÔºü])/).filter(item => item.trim());
    
    // ÈáçÊñ∞ÁªÑÂêàÂè•Â≠êÂíåÊ†áÁÇπÁ¨¶Âè∑
    const combinedSentences = [];
    for (let i = 0; i < sentences.length; i += 2) {
      if (sentences[i]) {
        const sentence = sentences[i].trim();
        const punctuation = sentences[i + 1] || '';
        if (sentence) {
          combinedSentences.push(sentence + punctuation);
        }
      }
    }
    
    // ÊØè2-3Âè•ÁªÑÊàê‰∏Ä‰∏™ÊÆµËêΩÔºåÈÅøÂÖçÊÆµËêΩËøáÈïø
    const paragraphs = [];
    for (let i = 0; i < combinedSentences.length; i += 2) {
      const paragraphSentences = combinedSentences.slice(i, i + 2);
      const paragraph = paragraphSentences.join('').trim();
      if (paragraph) {
        paragraphs.push(paragraph);
      }
    }
    
    // Â¶ÇÊûúÂàÜÊÆµÂêéÊÆµËêΩÂ§™Â∞ëÔºåÂ∞ùËØïÊåâÈÄóÂè∑Ëøõ‰∏ÄÊ≠•ÂàÜÊÆµ
    if (paragraphs.length <= 1 && cleanText.length > 200) {
      const commaSplit = cleanText.split(/[Ôºå,]/);
      if (commaSplit.length > 2) {
        const newParagraphs = [];
        for (let i = 0; i < commaSplit.length; i += 3) {
          const paragraphSentences = commaSplit.slice(i, i + 3);
          const paragraph = paragraphSentences.join('Ôºå').trim();
          if (paragraph) {
            newParagraphs.push(paragraph);
          }
        }
        return newParagraphs.length > 1 ? newParagraphs : paragraphs;
      }
    }
    
    return paragraphs.length > 0 ? paragraphs : [cleanText];
  },

  /**
   * ‰∏™‰∫∫‰ø°ÊÅØËÆæÁΩÆÂÆåÊàêÂõûË∞É
   */
  onProfileSetupComplete(e) {
    console.log('‰∏™‰∫∫‰ø°ÊÅØËÆæÁΩÆÂÆåÊàê', e.detail);
    // Êõ¥Êñ∞ÁôªÂΩïÁä∂ÊÄÅ
    this.checkLoginStatus();
  },

  /**
   * ÂÖ≥Èó≠‰∏™‰∫∫‰ø°ÊÅØËÆæÁΩÆÂºπÁ™ó
   */
  onCloseProfileSetupModal() {
    this.setData({
      showProfileSetupModal: false
    });
  },

  // ËøîÂõûÈ¶ñÈ°µ
  onBackHome() {
    console.log('ÁÇπÂáªËøîÂõûÊåâÈíÆ');
    try {
      // ÂÖàÂ∞ùËØïËøîÂõû‰∏ä‰∏ÄÈ°µ
      wx.navigateBack({
        delta: 1,
        fail: (err) => {
          console.log('navigateBackÂ§±Ë¥•:', err);
          // Â¶ÇÊûúËøîÂõûÂ§±Ë¥•ÔºåË∑≥ËΩ¨Âà∞È¶ñÈ°µ
          wx.reLaunch({
            url: '/pages/index/index'
          });
        }
      });
    } catch (error) {
      console.error('ËøîÂõûÊìç‰ΩúÂºÇÂ∏∏:', error);
      // ÂºÇÂ∏∏ÊÉÖÂÜµ‰∏ãË∑≥ËΩ¨Âà∞È¶ñÈ°µ
      wx.reLaunch({
        url: '/pages/index/index'
      });
    }
  },

  // ÂÖ≥Èó≠È°µÈù¢
  onClose() {
    console.log('ÁÇπÂáªÂÖ≥Èó≠ÊåâÈíÆ');
    try {
      // ÂÖàÂ∞ùËØïËøîÂõû‰∏ä‰∏ÄÈ°µ
      wx.navigateBack({
        delta: 1,
        fail: (err) => {
          console.log('navigateBackÂ§±Ë¥•:', err);
          // Â¶ÇÊûúËøîÂõûÂ§±Ë¥•ÔºåË∑≥ËΩ¨Âà∞È¶ñÈ°µ
          wx.reLaunch({
            url: '/pages/index/index'
          });
        }
      });
    } catch (error) {
      console.error('ÂÖ≥Èó≠Êìç‰ΩúÂºÇÂ∏∏:', error);
      // ÂºÇÂ∏∏ÊÉÖÂÜµ‰∏ãË∑≥ËΩ¨Âà∞È¶ñÈ°µ
      wx.reLaunch({
        url: '/pages/index/index'
      });
    }
  },

  // È¢ÑËßàÂõæÁâá
  onPreviewImage() {
    const { result } = this.data;
    if (result && result.imageUrl) {
      wx.previewImage({
        urls: [result.imageUrl],
        current: result.imageUrl
      });
    }
  },

  // ÂàÜ‰∫´
  onShare() {
    const { result } = this.data;
    if (result) {
      return {
        title: this.data.i18n.result.dreamAnalysisResult,
        path: `/pages/result/result?data=${encodeURIComponent(JSON.stringify(result))}`,
        imageUrl: result.imageUrl || ''
      };
    }
    return {
      title: this.data.i18n.result.dreamAnalysis,
      path: '/pages/index/index'
    };
  },

  // ÈïøÊåâÂàÜ‰∫´
  onLongPressShare() {
    wx.showActionSheet({
      itemList: [this.data.i18n.result.shareToFriends, this.data.i18n.result.saveToAlbum, this.data.i18n.result.copyLink],
      success: (res) => {
        switch (res.tapIndex) {
          case 0:
            this.onShare();
            break;
          case 1:
            this.saveToAlbum();
            break;
          case 2:
            this.copyLink();
            break;
        }
      }
    });
  },

  // ‰øùÂ≠òÂà∞Áõ∏ÂÜå
  saveToAlbum() {
    const { result } = this.data;
    if (result && result.imageUrl) {
      wx.saveImageToPhotosAlbum({
        filePath: result.imageUrl,
        success: () => {
          wx.showToast({
            title: this.data.i18n.result.saveSuccess,
            icon: 'success'
          });
        },
        fail: () => {
          wx.showToast({
            title: this.data.i18n.result.saveFailed,
            icon: 'error'
          });
        }
      });
    }
  },

  // Â§çÂà∂ÈìæÊé•
  copyLink() {
    const { result } = this.data;
    if (result) {
      wx.setClipboardData({
        data: `${this.data.i18n.result.dreamAnalysisResult}Ôºö${result.dreamDescription}`,
        success: () => {
          wx.showToast({
            title: this.data.i18n.result.copied,
            icon: 'success'
          });
        }
      });
    }
  },

  // ÂèëÂ∏ÉÂà∞Á§æÂå∫
  onPublishToCommunity() {
    const { result } = this.data;
    
    console.log('ÂáÜÂ§áÂèëÂ∏ÉÔºåresult:', result);
    console.log('analysisIdÂ≠òÂú®:', !!result?.analysisId);
    console.log('analysisIdÂÄº:', result?.analysisId);
    
    if (!result || !result.analysisId) {
      wx.showToast({
        title: this.data.i18n.result.dataErrorMissingId,
        icon: 'error'
      });
      return;
    }

    // ÊòæÁ§∫Á°ÆËÆ§ÂØπËØùÊ°Ü
    wx.showModal({
      title: this.data.i18n.result.publishToCommunity,
      content: this.data.i18n.result.confirmPublish,
      confirmText: this.data.i18n.result.publish,
      cancelText: this.data.i18n.result.cancel,
      success: (res) => {
        if (res.confirm) {
          this.publishToCommunity();
        }
      }
    });
  },

  // Ë∞ÉÁî®ÂèëÂ∏ÉÊé•Âè£
  async publishToCommunity() {
    const { result } = this.data;
    
    console.log('ÂáÜÂ§áÂèëÂ∏ÉÔºåanalysisId:', result.analysisId, 'Á±ªÂûã:', typeof result.analysisId);
    
    try {
      // ÊòæÁ§∫Âä†ËΩΩÊèêÁ§∫
      wx.showLoading({
        title: this.data.i18n.result.publishing
      });

      // Ë∞ÉÁî®ÂèëÂ∏ÉÊé•Âè£
      const http = require('../../services/http.js');
      const requestData = {
        analysisId: result.analysisId,
        isPublic: 1
      };
      
      console.log('ÂèëÂ∏ÉËØ∑Ê±ÇÊï∞ÊçÆ:', requestData);
      console.log('ÂèëÂ∏ÉÊé•Âè£URL: /dream/posts/publish');
      
      const response = await http.post('/dream/posts/publish', requestData);

      console.log('ÂèëÂ∏ÉÂìçÂ∫î:', response);

      if (response && response.code === 0) {
        wx.hideLoading();
        wx.showToast({
          title: this.data.i18n.result.publishSuccess,
          icon: 'success',
          duration: 2000
        });
        
        // ÂèØ‰ª•Âú®ËøôÈáåÊ∑ªÂä†ÂÖ∂‰ªñÊàêÂäüÂêéÁöÑÂ§ÑÁêÜÔºåÊØîÂ¶ÇË∑≥ËΩ¨Âà∞Á§æÂå∫È°µÈù¢
        setTimeout(() => {
          wx.navigateTo({
            url: '/pages/community/community'
          });
        }, 2000);
      } else {
        throw new Error(response?.message || this.data.i18n.result.publishFailed);
      }
    } catch (error) {
      console.error('ÂèëÂ∏ÉÂ§±Ë¥•:', error);
      wx.hideLoading();
      
      // Ê£ÄÊü•ÊòØÂê¶ÊòØ401Êú™ÊéàÊùÉÈîôËØØ
      if (error.statusCode === 401 || (error.data && error.data.code === 401)) {
        wx.showModal({
          title: this.data.i18n.result.loginRequired,
          content: this.data.i18n.result.loginRequiredForPublish,
          confirmText: this.data.i18n.result.goToLogin,
          success: (res) => {
            if (res.confirm) {
              // Ë∑≥ËΩ¨Âà∞ÁôªÂΩïÈ°µÈù¢ÊàñÊòæÁ§∫ÁôªÂΩïÂºπÁ™ó
              wx.navigateTo({
                url: '/pages/profile/profile'
              });
            }
          }
        });
      } else {
        wx.showToast({
          title: error.message || this.data.i18n.result.publishFailed,
          icon: 'error',
          duration: 2000
        });
      }
    }
  },

  // ÁîüÊàêÊµ∑Êä•
  async onGeneratePoster() {
    console.log('onGeneratePoster: this.data.result', this.data.result);
    if (!this.data.result) {
      wx.showToast({
        title: this.data.i18n.result.noData,
        icon: 'error'
      });
      return;
    }
    
    // ÊòæÁ§∫Âä†ËΩΩÊèêÁ§∫
    wx.showLoading({
      title: this.data.i18n.result.generatingPoster
    });
    
    try {
      // ÂÖàÊ∏ÖÁêÜÂ≠òÂÇ®Á©∫Èó¥
      this.clearStorage();
      
      // Á≠âÂæÖ‰∏Ä‰∏ãÂÜçÁîüÊàêÔºåÁ°Æ‰øùÊ∏ÖÁêÜÂÆåÊàê
      await new Promise(resolve => setTimeout(resolve, 1000));
      
      // ÊûÑÂª∫Êµ∑Êä•ÈÖçÁΩÆÂπ∂Á≠âÂæÖÂÆåÊàê
      await this.buildPosterConfig();
    
      // Ëé∑ÂèñposterÁªÑ‰ª∂Âπ∂Ë∞ÉÁî®onCreateÊñπÊ≥ï
      const poster = this.selectComponent('#poster');
      if (poster) {
        console.log('ÂºÄÂßãÁîüÊàêÊµ∑Êä•...');
        poster.onCreate(true);
      } else {
        wx.hideLoading();
        wx.showToast({
          title: this.data.i18n.result.posterComponentNotFound,
          icon: 'error'
        });
      }
    } catch (error) {
      console.error('ÁîüÊàêÊµ∑Êä•ÈÖçÁΩÆÂ§±Ë¥•:', error);
      wx.hideLoading();
      wx.showToast({
        title: this.data.i18n.result.generationFailed,
        icon: 'error'
      });
    }
  },

  // ÊûÑÂª∫Êµ∑Êä•ÈÖçÁΩÆ
  buildPosterConfig() {
    const { result } = this.data;
    console.log('buildPosterConfig: result data used for config', result);
    
    return new Promise(async (resolve, reject) => {
      try {
        // Âè™Â§ÑÁêÜ‰∫åÁª¥Á†Å
        const qrCodeUrl = await this.getQRCode();
        console.log('‰∫åÁª¥Á†ÅÂ§ÑÁêÜÁªìÊûú:', qrCodeUrl);
        
        // Â§ÑÁêÜÂÖ≥ÈîÆËØçÔºåËΩ¨Êç¢‰∏∫Â≠óÁ¨¶‰∏≤
        const keywordsText = result.keywords && result.keywords.length > 0 
          ? result.keywords.join('„ÄÅ') 
          : this.data.i18n.result.noKeywords;
        
        // Â∏ÉÂ±Ä‰∏éÊ†∑ÂºèÂèÇÊï∞ - ‰ºòÂåñÂêéÁöÑËÆæËÆ°ÔºàÂéªÊéâÊ¢¶Â¢ÉÂÜÖÂÆπÔºâ
        const cardX = 40;
        const cardWidth = 670;
        const innerX = 60;
        const textWidth = 590;
        const titleFontSize = 48;
        const labelFontSize = 36;
        const keywordFontSize = 26;
        const interpFontSize = 28;
        const keywordLineHeight = 38;
        const interpLineHeight = 40;

        // ‰º∞ÁÆóÊñáÊú¨ÊâÄÈúÄÈ´òÂ∫¶ - Êõ¥Á≤æÁ°ÆÁöÑËá™ÈÄÇÂ∫îËÆ°ÁÆó
        const estimateBlockHeight = (text, fontSize, width, lineHeight, minHeight) => {
          const safeText = (text || '').toString();
          const charsPerLine = Math.max(8, Math.floor(width / (fontSize * 0.6))); // Ë∞ÉÊï¥Â≠óÁ¨¶ËÆ°ÁÆó
          const lines = Math.max(1, Math.ceil(safeText.length / charsPerLine));
          const height = lines * lineHeight + 20; // Ëøõ‰∏ÄÊ≠•ÂáèÂ∞ëÂÜÖËæπË∑ù
          return Math.max(minHeight, height);
        };

        // Â§ÑÁêÜÊ¢¶Â¢ÉËß£ÊûêÊñáÊú¨ÔºåÊà™ÂèñÂâç200Â≠óÁ¨¶‰Ωú‰∏∫ÊëòË¶Å
        const fullInterpretation = result.interpretation || this.data.i18n.result.noDreamAnalysis;
        const interpText = fullInterpretation.length > 200 
          ? fullInterpretation.substring(0, 200) + '...' 
          : fullInterpretation;

        const keywordBlockHeight = estimateBlockHeight(keywordsText, keywordFontSize, textWidth, keywordLineHeight, 30);
        const interpBlockHeight = estimateBlockHeight(interpText, interpFontSize, textWidth, interpLineHeight, 80);

        // Ë∞ÉÊï¥ÂêéÁöÑÂ∏ÉÂ±Ä‰ΩçÁΩÆ - ÂéªÊéâÊ¢¶Â¢ÉÂÜÖÂÆπÔºåÈáçÊñ∞Â∏ÉÂ±Ä
        const keywordLabelY = 220; // ÂÖ≥ÈîÆËØçÊ†áÁ≠æ‰ΩçÁΩÆ
        const keywordBlockY = keywordLabelY + 30; // Áªü‰∏Ä30pxÈó¥Ë∑ù
        const keywordTextY = keywordBlockY + 30; // Áªü‰∏Ä30pxÈó¥Ë∑ù

        const interpLabelY = keywordTextY + keywordBlockHeight + 40; // Ëß£ÊûêÊ†áÁ≠æ‰ΩçÁΩÆ
        const interpBlockY = interpLabelY + 30; // Áªü‰∏Ä30pxÈó¥Ë∑ù
        const interpTextY = interpBlockY + 30; // Áªü‰∏Ä30pxÈó¥Ë∑ù

        // ‰∏çÂÜç‰ΩøÁî®ÂõæÁâáÔºåÁßªÈô§Áõ∏ÂÖ≥ÂèòÈáè

        const config = {
          width: 750,
          height: 1334,
          backgroundColor: '#FFFFFF', // Á∫ØÁôΩËÉåÊôØÊõ¥ÁÆÄÊ¥Å
          debug: false,
          texts: [
            // ‰∏ªÊ†áÈ¢ò - ÂÖâÁà±Ê¢¶‰º¥
            {
              x: 375,
              y: 120,
              baseLine: 'middle',
              textAlign: 'center',
              text: this.data.i18n.result.appName,
              fontSize: 56,
              color: '#1A1A1A',
              fontWeight: 'bold',
              zIndex: 10
            },
            // ÂâØÊ†áÈ¢ò
            {
              x: 375,
              y: 180,
              baseLine: 'middle',
              textAlign: 'center',
              text: this.data.i18n.result.aiDreamAnalysis,
              fontSize: 26,
              color: '#1A1A1A',
              fontWeight: '600',
              zIndex: 10
            },
            // ÂÖ≥ÈîÆËØçÊ†áÁ≠æ
            {
              x: cardX,
              y: keywordLabelY,
              baseLine: 'top',
              textAlign: 'left',
              text: this.data.i18n.result.keywords,
              fontSize: 36,
              color: '#1A1A1A',
              fontWeight: 'bold',
              zIndex: 10
            },
            // ÂÖ≥ÈîÆËØçÊñáÊú¨
            {
              x: innerX,
              y: keywordTextY,
              baseLine: 'top',
              textAlign: 'left',
              text: keywordsText,
              fontSize: 26,
              color: '#000000',
              width: textWidth,
              lineHeight: 38,
              lineNum: 3,
              zIndex: 10
            },
            // Ê¢¶Â¢ÉËß£ÊûêÊ†áÁ≠æ
            {
              x: cardX,
              y: interpLabelY,
              baseLine: 'top',
              textAlign: 'left',
              text: this.data.i18n.result.dreamAnalysis,
              fontSize: 36,
              color: '#1A1A1A',
              fontWeight: 'bold',
              zIndex: 10
            },
            // Ê¢¶Â¢ÉËß£ÊûêÊñáÊú¨ÔºàÊëòË¶ÅÁâàÊú¨Ôºâ
            {
              x: innerX,
              y: interpTextY,
              baseLine: 'top',
              textAlign: 'left',
              text: interpText,
              fontSize: 28,
              color: '#000000',
              width: textWidth,
              lineHeight: 40,
              lineNum: 4,
              zIndex: 10
            }
          ],
          blocks: [
            // È°∂ÈÉ®Ë£ÖÈ•∞Êù°
            {
              x: 0,
              y: 0,
              width: 750,
              height: 8,
              backgroundColor: '#8B5CF6',
              borderRadius: 0,
              borderWidth: 0,
              borderColor: 'transparent',
              zIndex: 1
            },
            // È°∂ÈÉ®Ê∏êÂèòËÉåÊôØ
            {
              x: 0,
              y: 0,
              width: 750,
              height: 200,
              backgroundColor: 'rgba(139, 92, 246, 0.03)',
              borderRadius: 0,
              borderWidth: 0,
              borderColor: 'transparent',
              zIndex: 0
            },
            // ÂéªÊéâÊâÄÊúâÂÜÖÂÆπÂùóÁöÑÁôΩËâ≤ËÉåÊôØÔºåËÆ©ÂÜÖÂÆπÁõ¥Êé•ÊòæÁ§∫Âú®ËÉåÊôØÂõæÁâá‰∏ä
          ],
          images: []
        };
        
        // Ê∑ªÂä†ËÉåÊôØÂõæÁâá
        config.images.push({
          x: 0,
          y: 0,
          width: 750,
          height: 1334,
          url: 'https://dulele.org.cn/images/assest/dreamAnalysisResult.png',
          zIndex: 0
        });

        // ÁîüÊàêÁ∫ØÊñáÂ≠óÊµ∑Êä•Ôºå‰∏çÂåÖÂê´‰ªª‰ΩïÂõæÁâá
        console.log('üìù ÁîüÊàêÁ∫ØÊñáÂ≠óÊµ∑Êä•');

        // Êô∫ËÉΩËÆ°ÁÆó‰∫åÁª¥Á†Å‰ΩçÁΩÆÔºåÈÅøÂÖç‰∏éÂÜÖÂÆπÈáçÂè†
        if (qrCodeUrl) {
          const qrSize = 160; // ‰∫åÁª¥Á†ÅÂ∞∫ÂØ∏
          const qrX = (750 - qrSize) / 2; // Ê∞¥Âπ≥Â±Ö‰∏≠
          
          // ËÆ°ÁÆóÂÜÖÂÆπÊÄªÈ´òÂ∫¶
          const contentEndY = interpTextY + interpBlockHeight;
          const minSpacing = 60; // ÊúÄÂ∞èÈó¥Ë∑ù
          const qrY = Math.max(contentEndY + minSpacing, 1000); // Á°Æ‰øùÂú®ÂÜÖÂÆπ‰∏ãÊñπÔºåÊúÄÂ∞è‰ΩçÁΩÆ1000px
          
          // Ê£ÄÊü•ÊòØÂê¶‰ºöË∂ÖÂá∫ÁîªÂ∏ÉÂ∫ïÈÉ®
          const qrBottomY = qrY + qrSize + 40; // ‰∫åÁª¥Á†ÅÂ∫ïÈÉ® + ËØ¥ÊòéÊñáÂ≠óÈ´òÂ∫¶
          let finalQrY = qrY;
          
          if (qrBottomY > 1334) {
            console.warn('‰∫åÁª¥Á†Å‰ΩçÁΩÆÂèØËÉΩË∂ÖÂá∫ÁîªÂ∏ÉÔºåË∞ÉÊï¥‰ΩçÁΩÆ');
            // Â¶ÇÊûúË∂ÖÂá∫ÔºåË∞ÉÊï¥Âà∞ÁîªÂ∏ÉÂ∫ïÈÉ®
            finalQrY = 1334 - qrSize - 40;
            console.log('Ë∞ÉÊï¥ÂêéÁöÑ‰∫åÁª¥Á†ÅY‰ΩçÁΩÆ:', finalQrY);
          }
          
          console.log('‰∫åÁª¥Á†Å‰ΩçÁΩÆ‰ø°ÊÅØ:', {
            contentEndY,
            calculatedQrY: qrY,
            finalQrY,
            qrBottomY: finalQrY + qrSize + 40,
            canvasHeight: 1334
          });
          
          // ‰∫åÁª¥Á†Å‰∏äÊñπËØ¥ÊòéÊñáÂ≠ó
          config.texts.push({
            x: 375,
            y: finalQrY - 30,
            baseLine: 'middle',
            textAlign: 'center',
            text: this.data.i18n.result.scanForMore,
            fontSize: 20,
            color: '#6B7280',
            fontWeight: 'normal',
            zIndex: 10
          });
          
          // Â∞èÁ®ãÂ∫èÁ†ÅÂõæ
          config.images.push({
            x: qrX,
            y: finalQrY,
            width: qrSize,
            height: qrSize,
            url: qrCodeUrl,
            zIndex: 3
          });
          
          // ‰∫åÁª¥Á†Å‰∏ãÊñπËØ¥ÊòéÊñáÂ≠ó
          config.texts.push({
            x: 375,
            y: finalQrY + qrSize + 20,
            baseLine: 'middle',
            textAlign: 'center',
            text: this.data.i18n.result.longPressToScan,
            fontSize: 20,
            color: '#6B7280',
            fontWeight: 'normal',
            zIndex: 10
          });
        }
        
        this.setData({
          posterConfig: config
        });
        console.log('buildPosterConfig: final posterConfig', this.data.posterConfig);
        console.log('Êµ∑Êä•ÈÖçÁΩÆ‰∏≠ÁöÑÂõæÁâáÊï∞Èáè:', config.images.length);
        console.log('Êµ∑Êä•ÈÖçÁΩÆ‰∏≠ÁöÑÂõæÁâáËØ¶ÊÉÖ:', config.images);
        resolve(config);
      } catch (error) {
        console.error('ÊûÑÂª∫Êµ∑Êä•ÈÖçÁΩÆÂ§±Ë¥•:', error);
        // Âç≥‰ΩøÂ§ÑÁêÜÂõæÁâáÂ§±Ë¥•Ôºå‰πüÂ∞ùËØïÁîüÊàê‰∏çÂ∏¶ÂõæÁâáÁöÑÊµ∑Êä•
        try {
          const config = await this.buildPosterConfigWithoutQR();
          resolve(config);
        } catch (fallbackError) {
          console.error('ÁîüÊàêÂ§áÁî®Êµ∑Êä•ÈÖçÁΩÆ‰πüÂ§±Ë¥•:', fallbackError);
          resolve({
            width: 750,
            height: 1334,
            backgroundColor: '#8B5CF6',
            debug: false,
            texts: [],
            blocks: [],
            images: []
          });
        }
      }
    });
  },

  // Ëé∑ÂèñÂ∞èÁ®ãÂ∫èÁ†Å
  async getQRCode() {
    try {
      const config = require('../../config/env.js');
      // ÊûÑÂª∫Â∞èÁ®ãÂ∫èÁ†ÅURLÔºà‰øÆÊ≠£‰∏∫ /auth/wechat/miniÔºâ
      const qrCodeUrl = `${config.baseURL}/auth/wechat/mini?path=pages/index/index`;
      console.log('Â∞èÁ®ãÂ∫èÁ†ÅURL:', qrCodeUrl);

      // Áõ¥Êé•‰∏ãËΩΩ‰∫åÁª¥Á†Å‰∫åËøõÂà∂ÔºåÂÜôÂÖ•Êú¨Âú∞Êñá‰ª∂ÂêéËøîÂõûÊú¨Âú∞Ë∑ØÂæÑÔºåÈÅøÂÖçÊéàÊùÉÂ§¥Âú® downloadFile ‰∏≠Êó†Ê≥ïÊê∫Â∏¶ÁöÑÈóÆÈ¢ò
      return new Promise((resolve) => {
        const token = (getApp() && getApp().globalData && getApp().globalData.token) || '';
        wx.request({
          url: qrCodeUrl,
          method: 'GET',
          header: token ? { Authorization: `Bearer ${token}` } : {},
          responseType: 'arraybuffer',
          success: (res) => {
            if (res.statusCode === 200 && res.data) {
              try {
                const fs = wx.getFileSystemManager();
                const filePath = `${wx.env.USER_DATA_PATH}/qr_${Date.now()}.png`;
                fs.writeFile({
                  filePath,
                  data: res.data,
                  encoding: 'binary',
                  success: () => resolve(filePath),
                  fail: (e) => {
                    console.warn('ÂÜôÂÖ•‰∫åÁª¥Á†ÅÂ§±Ë¥•:', e);
                    resolve(null);
                  }
                });
              } catch (e) {
                console.warn('‰øùÂ≠ò‰∫åÁª¥Á†ÅÂºÇÂ∏∏:', e);
                resolve(null);
              }
            } else {
              console.warn('Ëé∑Âèñ‰∫åÁª¥Á†ÅÂ§±Ë¥•:', res.statusCode);
              resolve(null);
            }
          },
          fail: (err) => {
            console.warn('ËØ∑Ê±Ç‰∫åÁª¥Á†ÅÂ§±Ë¥•:', err);
            resolve(null);
          }
        });
      });
    } catch (error) {
      console.error('Ëé∑ÂèñÂ∞èÁ®ãÂ∫èÁ†ÅÂ§±Ë¥•:', error);
      return null;
    }
  },

  // Ê†ºÂºèÂåñÊñáÊú¨ÔºåËá™ÁÑ∂Êç¢Ë°åÔºà‰∏çÂº∫Âà∂ÂàÜÊÆµÔºâ
  formatTextWithBreaks(text) {
    if (!text) return '';
    
    // Ê∏ÖÁêÜÊñáÊú¨ÔºåÂéªÈô§Â§ö‰ΩôÁ©∫Ê†ºÂíåÊç¢Ë°å
    const cleanText = text.replace(/\s+/g, ' ').trim();
    
    // ‰∏çËøõË°åÂº∫Âà∂ÂàÜÊÆµÔºåËÆ©Êµ∑Êä•ÁªÑ‰ª∂Ê†πÊçÆÂÆΩÂ∫¶Ëá™ÁÑ∂Êç¢Ë°å
    return cleanText;
  },

  // ‰∏çÂåÖÂê´Â∞èÁ®ãÂ∫èÁ†ÅÁöÑÊµ∑Êä•ÈÖçÁΩÆ
  async buildPosterConfigWithoutQR() {
    const { result } = this.data;
    
    // Â§ÑÁêÜÂÖ≥ÈîÆËØçÔºåËΩ¨Êç¢‰∏∫Â≠óÁ¨¶‰∏≤
    const keywordsText = result.keywords && result.keywords.length > 0 
      ? result.keywords.join('„ÄÅ') 
      : this.data.i18n.result.noKeywords;
    
    // Â§ÑÁêÜÊ¢¶Â¢ÉËß£ÊûêÊñáÊú¨ÔºåÊà™ÂèñÂâç200Â≠óÁ¨¶‰Ωú‰∏∫ÊëòË¶Å
    const fullInterpretation = result.interpretation || this.data.i18n.result.noDreamAnalysis;
    const interpText = fullInterpretation.length > 200 
      ? fullInterpretation.substring(0, 200) + '...' 
      : fullInterpretation;
    
    const config = {
      width: 750,
      height: 1334,
      backgroundColor: '#8B5CF6',
      debug: false,
      texts: [
        // ‰∏ªÊ†áÈ¢ò - ÂÖâÁà±Ê¢¶‰º¥
        {
          x: 375,
          y: 110,
          baseLine: 'middle',
          textAlign: 'center',
          text: this.data.i18n.result.appName,
          fontSize: 56,
          color: '#ffffff',
          fontWeight: 'bold',
          zIndex: 10
        },
        // ÂÖ≥ÈîÆËØçÊ†áÁ≠æ
        {
          x: 60,
          y: 200,
          baseLine: 'top',
          textAlign: 'left',
          text: this.data.i18n.result.keywords,
          fontSize: 34,
          color: '#ffffff',
          fontWeight: 'bold',
          zIndex: 10
        },
        // ÂÖ≥ÈîÆËØçÊñáÊú¨
        {
          x: 80,
          y: 240,
          baseLine: 'top',
          textAlign: 'left',
          text: keywordsText,
          fontSize: 24,
          color: '#555555',
          width: 550,
          lineHeight: 36,
          zIndex: 10
        },
        // Ê¢¶Â¢ÉËß£ÊûêÊ†áÁ≠æ
        {
          x: 60,
          y: 320,
          baseLine: 'top',
          textAlign: 'left',
          text: this.data.i18n.result.dreamAnalysis,
          fontSize: 34,
          color: '#ffffff',
          fontWeight: 'bold',
          zIndex: 10
        },
        // Ê¢¶Â¢ÉËß£ÊûêÊñáÊú¨ÔºàÊëòË¶ÅÁâàÊú¨Ôºâ
        {
          x: 80,
          y: 360,
          baseLine: 'top',
          textAlign: 'left',
          text: interpText,
          fontSize: 26,
          color: '#555555',
          width: 550,
          lineHeight: 38,
          zIndex: 10
        },
        // AIÁîüÊàêÊµ∑Êä•Ê†áÁ≠æ
        {
          x: 375,
          y: 1240,
          baseLine: 'middle',
          textAlign: 'center',
          text: this.data.i18n.result.aiGeneratedPoster,
          fontSize: 26,
          color: '#ffffff',
          fontWeight: 'normal',
          zIndex: 10
        }
      ],
      blocks: [
        // ÂÖ≥ÈîÆËØçÂç°ÁâáËÉåÊôØ
        {
          x: 60,
          y: 220,
          width: 630,
          borderRadius: 24,
          borderWidth: 2,
          borderColor: 'rgba(255,255,255,0.6)',
          zIndex: 1
        },
        // Ê¢¶Â¢ÉËß£ÊûêÂç°ÁâáËÉåÊôØ
        {
          x: 60,
          y: 340,
          width: 630,
          borderRadius: 24,
          borderWidth: 2,
          borderColor: 'rgba(255,255,255,0.6)',
          zIndex: 1
        }
      ],
      images: []
    };
    
    this.setData({
      posterConfig: config
    });
    console.log('buildPosterConfigWithoutQR: final posterConfig', this.data.posterConfig);
    return config;
  },

  // Êµ∑Êä•ÁîüÊàêÊàêÂäüÂõûË∞É
  onPosterSuccess(e) {
    const { detail } = e;
    console.log('Êµ∑Êä•ÁîüÊàêÊàêÂäü:', detail);
    wx.hideLoading();
    
    // ‰øùÂ≠òÂà∞Áõ∏ÂÜå
    wx.saveImageToPhotosAlbum({
      filePath: detail,
      success: () => {
        wx.showToast({
          title: this.data.i18n.result.saveSuccess,
          icon: 'success'
        });
        // Ê∑ªÂä†È¢ÑËßàÂäüËÉΩ
        wx.previewImage({
          current: detail, // ÂΩìÂâçÊòæÁ§∫ÂõæÁâáÁöÑÈìæÊé•
          urls: [detail]   // ÈúÄË¶ÅÈ¢ÑËßàÁöÑÂõæÁâáÈìæÊé•ÂàóË°®
        });
      },
      fail: (err) => {
        console.error('‰øùÂ≠òÂ§±Ë¥•:', err);
        console.error('‰øùÂ≠òÂ§±Ë¥•ËØ¶ÊÉÖ:', JSON.stringify(err, null, 2));
        if (err.errMsg.includes('auth deny')) {
          wx.showModal({
            title: this.data.i18n.result.needAuthForImage,
            content: this.data.i18n.result.allowSaveImage,
            confirmText: this.data.i18n.result.goToSettings,
            success: (res) => {
              if (res.confirm) {
                wx.openSetting();
              }
            }
          });
        } else {
          wx.showToast({
            title: this.data.i18n.result.saveFailed,
            icon: 'error'
          });
        }
      }
    });
  },

  // Êµ∑Êä•ÁîüÊàêÂ§±Ë¥•ÂõûË∞É
  onPosterFail(err) {
    console.error('Êµ∑Êä•ÁîüÊàêÂ§±Ë¥•:', err);
    console.error('ÈîôËØØËØ¶ÊÉÖ:', JSON.stringify(err, null, 2));
    wx.hideLoading();
    
    // Ê†πÊçÆÈîôËØØÁ±ªÂûãÁªôÂá∫‰∏çÂêåÁöÑÊèêÁ§∫
    let errorMessage = this.data.i18n.result.generationFailed;
    if (err && err.detail && err.detail.errMsg) {
      if (err.detail.errMsg.includes('downloadFile:fail')) {
        errorMessage = this.data.i18n.result.networkFailed;
      } else if (err.detail.errMsg.includes('getaddrinfo ENOTFOUND')) {
        errorMessage = this.data.i18n.result.serverConnectionFailed;
      } else if (err.detail.errMsg.includes('tmp')) {
        errorMessage = this.data.i18n.result.tempFileFailed;
      }
    }
    
    wx.showToast({
      title: errorMessage,
      icon: 'error',
      duration: 3000
    });
  },

  // ÁÇπÂáªÊòüÊòüËØÑÂàÜ
  onStarTap(e) {
    const rating = parseInt(e.currentTarget.dataset.rating);
    const currentRating = this.data.feedbackRating;
    
    // Â¶ÇÊûúÁÇπÂáªÁöÑÊòØÂΩìÂâçËØÑÂàÜÔºåÂàôÂèñÊ∂àÈÄâÊã©ÔºàËÆæ‰∏∫0Ôºâ
    // Âê¶ÂàôËÆæÁΩÆ‰∏∫ÁÇπÂáªÁöÑËØÑÂàÜ
    const newRating = rating === currentRating ? 0 : rating;
    
    this.setData({
      feedbackRating: newRating
    });
  },

  // ÂèçÈ¶àÂÜÖÂÆπËæìÂÖ•
  onFeedbackInput(e) {
    this.setData({
      feedbackContent: e.detail.value
    });
  },

  // ÁñèÂØºÊÄßÈóÆÈ¢òÂõûÁ≠îËæìÂÖ•
  onAnswer1Input(e) {
    this.setData({
      answer1: e.detail.value
    });
  },

  onAnswer2Input(e) {
    this.setData({
      answer2: e.detail.value
    });
  },

  // ÊäòÂè†Èù¢ÊùøÁä∂ÊÄÅÂèòÂåñ
  onCollapseChange(e) {
    this.setData({
      activeNames: e.detail
    });
  },

  // ‰øùÂ≠òÁñèÂØºÊÄßÈóÆÈ¢òÂõûÁ≠î
  async onSaveAnswers() {
    if (this.data.savingAnswers) return;

    const { answer1, answer2, result } = this.data;
    
    // Ê£ÄÊü•ÊòØÂê¶ÊúâÂõûÁ≠îÂÜÖÂÆπ
    if (!answer1 && !answer2) {
      wx.showToast({
        title: this.data.i18n.result.pleaseAnswerAtLeastOne,
        icon: 'none'
      });
      return;
    }

    this.setData({ savingAnswers: true });

    try {
      console.log('‰øùÂ≠òÁñèÂØºÊÄßÈóÆÈ¢òÂõûÁ≠î:', { answer1, answer2 });
      
      const http = require('../../services/http.js');
      const requestData = {
        analysisId: result.analysisId,
        question1: answer1,
        question2: answer2
      };
      
      const response = await http.post('/dream/analysis/save-answers', requestData);
      
      console.log('‰øùÂ≠òÂõûÁ≠îÂìçÂ∫î:', response);
      
      if (response && response.code === 0) {
        wx.showToast({
          title: this.data.i18n.result.thinkingSaved,
          icon: 'success',
          duration: 2000
        });
      } else {
        throw new Error(response?.message || this.data.i18n.result.saveFailed);
      }
    } catch (error) {
      console.error('‰øùÂ≠òÂõûÁ≠îÂ§±Ë¥•:', error);
      
      // Ê£ÄÊü•ÊòØÂê¶ÊòØ401Êú™ÊéàÊùÉÈîôËØØ
      if (error.statusCode === 401 || (error.data && error.data.code === 401)) {
        wx.showModal({
          title: this.data.i18n.result.loginRequired,
          content: this.data.i18n.result.loginRequiredForSave,
          confirmText: this.data.i18n.result.goToLogin,
          success: (res) => {
            if (res.confirm) {
              wx.navigateTo({
                url: '/pages/profile/profile'
              });
            }
          }
        });
      } else {
        wx.showToast({
          title: error.message || this.data.i18n.result.saveFailed,
          icon: 'error',
          duration: 2000
        });
      }
    } finally {
      this.setData({ savingAnswers: false });
    }
  },

  // Êèê‰∫§ÂèçÈ¶à
  async onSubmitFeedback() {
    if (this.data.submittingFeedback) return;

    const { feedbackRating, feedbackContent } = this.data;
    
    // Ê£ÄÊü•ÊòØÂê¶Ëá≥Â∞ëÊúâ‰∏ÄÈ°πÂÜÖÂÆπ
    if (feedbackRating <= 0 && (!feedbackContent || feedbackContent.trim() === '')) {
      wx.showToast({
        title: this.data.i18n.result.pleaseSelectRatingOrFeedback,
        icon: 'none'
      });
      return;
    }

    this.setData({ submittingFeedback: true });

    try {
      console.log('Êèê‰∫§ÂèçÈ¶à:', { rating: feedbackRating, content: feedbackContent });
      
      const http = require('../../services/http.js');
      const requestData = {
        content: feedbackContent
      };
      
      // Âè™ÊúâÂΩìËØÑÂàÜÂ§ß‰∫é0Êó∂ÊâçÊ∑ªÂä†ratingÂèÇÊï∞
      if (feedbackRating > 0) {
        requestData.rating = feedbackRating;
      }
      
      const response = await http.post('/user/feedback', requestData);
      
      console.log('ÂèçÈ¶àÊèê‰∫§ÂìçÂ∫î:', response);
      
      if (response && response.code === 0) {
        wx.showToast({
          title: this.data.i18n.result.feedbackSubmitSuccess,
          icon: 'success'
        });
        
        // ËÆæÁΩÆÂèçÈ¶àÂ∑≤Êèê‰∫§Áä∂ÊÄÅ
        this.setData({
          feedbackSubmitted: true,
          feedbackRating: 0,
          feedbackContent: ''
        });
      } else {
        throw new Error(response?.message || this.data.i18n.result.feedbackSubmitFailed);
      }
    } catch (error) {
      console.error('Êèê‰∫§ÂèçÈ¶àÂ§±Ë¥•:', error);
      
      // Ê£ÄÊü•ÊòØÂê¶ÊòØ401Êú™ÊéàÊùÉÈîôËØØ
      if (error.statusCode === 401 || (error.data && error.data.code === 401)) {
        wx.showModal({
          title: this.data.i18n.result.loginRequired,
          content: this.data.i18n.result.loginRequiredForFeedback,
          confirmText: this.data.i18n.result.goToLogin,
          success: (res) => {
            if (res.confirm) {
              wx.navigateTo({
                url: '/pages/profile/profile'
              });
            }
          }
        });
      } else {
        wx.showToast({
          title: error.message || this.data.i18n.result.submitFailed,
          icon: 'error'
        });
      }
    } finally {
      this.setData({ submittingFeedback: false });
    }
  },

  // Ê∏ÖÁêÜÂ≠òÂÇ®Á©∫Èó¥
  clearStorage() {
    try {
      const fs = wx.getFileSystemManager();
      // Ê∏ÖÁêÜ‰∏¥Êó∂Êñá‰ª∂
      fs.rmdir({
        dirPath: wx.env.USER_DATA_PATH,
        recursive: true,
        success: () => {
          console.log('Â≠òÂÇ®Á©∫Èó¥Ê∏ÖÁêÜÊàêÂäü');
        },
        fail: (err) => {
          console.log('Â≠òÂÇ®Á©∫Èó¥Ê∏ÖÁêÜÂ§±Ë¥•:', err);
        }
      });
    } catch (error) {
      console.error('Ê∏ÖÁêÜÂ≠òÂÇ®ÂºÇÂ∏∏:', error);
    }
  },


  // Â∞ÜËøúÁ®ãÂõæÁâáËΩ¨Êç¢‰∏∫Êú¨Âú∞‰∏¥Êó∂Êñá‰ª∂ÔºåÈÅøÂÖçË∑®Âüü/ÂüüÂêçËß£ÊûêÈóÆÈ¢ò
  ensureLocalImage(remoteUrl) {
    return new Promise((resolve) => {
      if (!remoteUrl) {
        console.log('ensureLocalImage: Êó†ÂõæÁâáURL');
        resolve(null);
        return;
      }
      
      console.log('ensureLocalImage: ÂºÄÂßãÂ§ÑÁêÜÂõæÁâá', remoteUrl);
      
      // Ê£ÄÊü•ÊòØÂê¶ÊòØÊú¨Âú∞Êñá‰ª∂Ë∑ØÂæÑ
      if (remoteUrl.startsWith('http://usr/') || remoteUrl.startsWith('file://') || remoteUrl.startsWith('wxfile://')) {
        console.log('Ê£ÄÊµãÂà∞Êú¨Âú∞Êñá‰ª∂Ë∑ØÂæÑÔºåÈúÄË¶ÅËΩ¨Êç¢‰∏∫ÂèØÁî®ÁöÑÊ†ºÂºè:', remoteUrl);
        // ‰ΩøÁî®ËΩ¨Êç¢ÊñπÊ≥ï
        const convertedUrl = this.convertImageUrlForPoster(remoteUrl);
        resolve(convertedUrl);
        return;
      }
      
      // ÂÖàÊ£ÄÊü•Â≠òÂÇ®Á©∫Èó¥
      wx.getStorageInfo({
        success: (res) => {
          const usedSize = res.currentSize;
          const limitSize = res.limitSize;
          
          // Â¶ÇÊûú‰ΩøÁî®Ë∂ÖËøá80%ÔºåÂÖàÊ∏ÖÁêÜ
          if (usedSize / limitSize > 0.8) {
            console.log('Â≠òÂÇ®Á©∫Èó¥‰∏çË∂≥ÔºåÊ∏ÖÁêÜ‰∏≠...');
            this.clearStorage();
          }
          
          // ÁªßÁª≠‰∏ãËΩΩÈÄªËæë
          this.downloadImage(remoteUrl, resolve);
        },
        fail: () => {
          // Ëé∑ÂèñÂ≠òÂÇ®‰ø°ÊÅØÂ§±Ë¥•ÔºåÁõ¥Êé•‰∏ãËΩΩ
          this.downloadImage(remoteUrl, resolve);
        }
      });
    });
  },

  // ‰∏ãËΩΩÂõæÁâáÁöÑÈÄöÁî®ÊñπÊ≥ï
  downloadImage(remoteUrl, resolve) {
    try {
      console.log('downloadImage: ÂºÄÂßã‰∏ãËΩΩÂõæÁâá', remoteUrl);
      
      // Ê£ÄÊü•ÊòØÂê¶ÊòØÊú¨Âú∞Êñá‰ª∂Ë∑ØÂæÑ
      if (remoteUrl.startsWith('http://usr/') || remoteUrl.startsWith('file://')) {
        console.log('Ê£ÄÊµãÂà∞Êú¨Âú∞Êñá‰ª∂Ë∑ØÂæÑÔºåÈúÄË¶ÅËΩ¨Êç¢Ê†ºÂºè:', remoteUrl);
        // ‰ΩøÁî®ËΩ¨Êç¢ÊñπÊ≥ï
        const convertedUrl = this.convertImageUrlForPoster(remoteUrl);
        resolve(convertedUrl);
        return;
      }
      
      wx.downloadFile({
        url: remoteUrl,
        timeout: 30000, // 30ÁßíË∂ÖÊó∂
        success: (res) => {
          console.log('downloadFile success:', res);
          if (res.statusCode === 200 && res.tempFilePath) {
            // È™åËØÅÊñá‰ª∂ÊòØÂê¶ÊúâÊïà
            wx.getFileInfo({
              filePath: res.tempFilePath,
              success: (fileInfo) => {
                console.log('Êñá‰ª∂‰ø°ÊÅØ:', fileInfo);
                if (fileInfo.size > 0) {
                  // Â∞Ü‰∏¥Êó∂Êñá‰ª∂Â§çÂà∂Âà∞ÊåÅ‰πÖÂ≠òÂÇ®ÁõÆÂΩï
                  this.persistImageFile(res.tempFilePath, resolve);
                } else {
                  console.log('Êñá‰ª∂Â§ßÂ∞è‰∏∫0ÔºåÂ∞ùËØïgetImageInfo');
                  this.getImageInfo(remoteUrl, resolve);
                }
              },
              fail: (err) => {
                console.log('Ëé∑ÂèñÊñá‰ª∂‰ø°ÊÅØÂ§±Ë¥•:', err);
                this.getImageInfo(remoteUrl, resolve);
              }
            });
          } else {
            console.log('ensureLocalImage: ‰∏ãËΩΩÂ§±Ë¥•ÔºåÁä∂ÊÄÅÁ†Å:', res.statusCode);
            this.getImageInfo(remoteUrl, resolve);
          }
        },
        fail: (err) => {
          console.log('downloadFile fail:', err);
          this.getImageInfo(remoteUrl, resolve);
        }
      });
    } catch (e) {
      console.log('downloadImage exception:', e);
      resolve(null);
    }
  },

  // ÊåÅ‰πÖÂåñÂõæÁâáÊñá‰ª∂
  persistImageFile(tempFilePath, resolve) {
    try {
      const fs = wx.getFileSystemManager();
      const ext = (tempFilePath.split('.').pop() || 'png').split('?')[0];
      const target = `${wx.env.USER_DATA_PATH}/poster_img_${Date.now()}_${Math.floor(Math.random()*1e6)}.${ext}`;
      
      fs.readFile({
        filePath: tempFilePath,
        success: (readRes) => {
          fs.writeFile({
            filePath: target,
            data: readRes.data,
            encoding: 'binary',
            success: () => {
              console.log('ensureLocalImage: ÊåÅ‰πÖÂåñÂà∞Êú¨Âú∞ÊàêÂäü', target);
              resolve(target);
            },
            fail: (e) => {
              console.log('ensureLocalImage: ÂÜôÂÖ•Â§±Ë¥•ÔºåÂõûÈÄÄtemp', e);
              resolve(tempFilePath);
            }
          });
        },
        fail: (e) => {
          console.log('ensureLocalImage: ËØªÂèñÂ§±Ë¥•ÔºåÂõûÈÄÄtemp', e);
          resolve(tempFilePath);
        }
      });
    } catch (e) {
      console.log('ensureLocalImage: ÊåÅ‰πÖÂåñÂºÇÂ∏∏ÔºåÂõûÈÄÄtemp', e);
      resolve(tempFilePath);
    }
  },

  // Ëé∑ÂèñÂõæÁâá‰ø°ÊÅØÁöÑÈÄöÁî®ÊñπÊ≥ï
  getImageInfo(remoteUrl, resolve) {
    wx.getImageInfo({
      src: remoteUrl,
      success: (info) => {
        console.log('getImageInfo success:', info);
        const local = info.path || info.src;
        if (!local) {
          resolve(null);
          return;
        }
        // Áõ¥Êé•‰ΩøÁî®Ëé∑ÂèñÂà∞ÁöÑÊú¨Âú∞Ë∑ØÂæÑÔºå‰∏çËøõË°åÈ¢ùÂ§ñÂÜôÂÖ•
        resolve(local);
      },
      fail: (err) => {
        console.log('getImageInfo fail:', err);
        resolve(null);
      }
    });
  },

  /**
   * Áî®Êà∑ÁÇπÂáªÂè≥‰∏äËßíÂàÜ‰∫´
   */
  onShareAppMessage() {
    return {
      title: this.data.i18n.app.shareTitle,
      path: '/pages/result/result',
      imageUrl: '' // ÂèØ‰ª•ËÆæÁΩÆÂàÜ‰∫´ÂõæÁâá
    };
  },

  /**
   * Áî®Êà∑ÁÇπÂáªÂè≥‰∏äËßíÂàÜ‰∫´Âà∞ÊúãÂèãÂúà
   */
  onShareTimeline() {
    return {
      title: this.data.i18n.app.timelineTitle,
      imageUrl: '' // ÂèØ‰ª•ËÆæÁΩÆÂàÜ‰∫´ÂõæÁâá
    };
  }
});

