{"version":3,"sources":["index.js","lib/painter.js","lib/layer.js","lib/color.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["module.exports = require('./lib/painter')\n","var fs = require('fs')\n  , util = require('util')\n  , xmlbuilder = require('xmlbuilder')\n  , Layer = require('./layer')\n  , Color = require('./color')\n\nfunction Painter(options) {\n  if (!(this instanceof Painter)) {\n    return new Painter(options)\n  }\n\n  this.root = xmlbuilder.create('svg')\n  this.root.attributes = {\n    width: options.width + 'px',\n    height: options.height + 'px',\n    viewBox: '0 0 ' + options.width + ' ' + options.height,\n    version: '1.1',\n    xmlns: 'http://www.w3.org/2000/svg'\n  }\n\n  Layer.call(this)\n\n  if (options.title) {\n    this.title(options.title)\n  }\n\n  if (options.desc) {\n    this.desc(options.desc)\n  }\n}\nutil.inherits(Painter, Layer)\nPainter.createPainter = Painter\n\nPainter.prototype.title = title\nfunction title(text) {\n  this.root.ele('title', {}, text)\n\n  return this\n}\n\nPainter.prototype.desc = desc\nfunction desc(text) {\n  this.root.ele('desc', {}, text)\n\n  return this\n}\n\nPainter.prototype.render = render\nfunction render(stream, options) {\n  if (typeof stream !== 'object') {\n    stream = fs.createWriteStream(stream)\n  }\n\n  stream.write(this.toString(options))\n  stream.end()\n}\n\nPainter.prototype.toString = toString\nfunction toString(options) {\n  return this.root.document().toString(options)\n}\n\nPainter.Color = Color\nPainter.Layer = Layer\nmodule.exports = Painter\n","function Layer(parentNode, options) {\n  if (!(this instanceof Layer)) {\n    return new Layer(parentNode, options)\n  }\n\n  this.root = this.root || parentNode.ele('g', Layer.getStyle(options))\n}\n\nLayer.getStyle = getStyle\nfunction getStyle(options) {\n  var attrs = {}\n\n  if (options && options.stroke) {\n    attrs.stroke = options.stroke.color\n    attrs['stroke-width'] = options.stroke.width\n    attrs['stroke-linecap'] = options.stroke.linecap\n  }\n\n  if (options && options.fill) {\n    attrs.fill = options.fill\n  }\n\n  return attrs\n}\n\nLayer.getPoints = getPoints\nfunction getPoints(points) {\n  return points.map(function (point) {\n    return point.x + ',' + point.y\n  }).join(' ')\n}\n\nLayer.validatePoints = validatePoints\nfunction validatePoints(points) {\n  if (!points || points.some(function (point) {\n    return !(point && point.x && point.y)\n  })) {\n    throw new Error('Invalid Points')\n  }\n}\n\nLayer.prototype.createLayer = createLayer\nfunction createLayer(options) {\n  return new Layer(this.root, options)\n}\n\nLayer.prototype.rect = rect\nfunction rect(options) {\n  var attrs\n\n  options = options || {}\n\n  attrs = Layer.getStyle(options)\n  attrs.x = options.x || 0\n  attrs.y = options.y || 0\n  attrs.width = options.width || 0\n  attrs.height = options.height || 0\n\n  this.root.ele('rect', attrs)\n\n  return this\n}\n\nLayer.prototype.circle = circle\nfunction circle(options) {\n  var attrs\n\n  options = options || {}\n\n  attrs = Layer.getStyle(options)\n  attrs.cx = options.x || 0\n  attrs.cy = options.y || 0\n  attrs.r = options.radius || 0\n\n  this.root.ele('circle', attrs)\n\n  return this\n}\n\nLayer.prototype.ellipse = ellipse\nfunction ellipse(options) {\n  var attrs\n\n  // TODO: Alternatively an ellipse based on width and height.\n\n  options = options || {}\n  options.radius = options.radius || {}\n\n  attrs = Layer.getStyle(options)\n  attrs.cx = options.x || 0\n  attrs.cy = options.y || 0\n  attrs.rx = options.radius.x || 0\n  attrs.ry = options.radius.y || 0\n\n  this.root.ele('ellipse', attrs)\n\n  return this\n}\n\nLayer.prototype.line = line\nfunction line(options) {\n  var points = options && options.points\n    , attrs\n\n  Layer.validatePoints(points)\n\n  attrs = Layer.getStyle(options)\n  attrs.x1 = points[0].x || 0\n  attrs.y1 = points[0].y || 0\n  attrs.x2 = points[1].x || 0\n  attrs.y2 = points[1].y || 0\n\n  this.root.ele('line', attrs)\n\n  return this\n}\n\nLayer.prototype.polyline = polyline\nfunction polyline(options) {\n  var points = options && options.points\n    , attrs\n\n  Layer.validatePoints(points)\n\n  attrs = Layer.getStyle(options)\n  attrs.points = Layer.getPoints(points)\n\n  this.root.ele('polyline', attrs)\n\n  return this\n}\n\nLayer.prototype.polygon = polygon\nfunction polygon(options) {\n  var points = options && options.points\n    , attrs\n\n  Layer.validatePoints(points)\n\n  attrs = Layer.getStyle(options)\n  attrs.points = Layer.getPoints(points)\n\n  this.root.ele('polygon', attrs)\n\n  return this\n}\n\nmodule.exports = Layer\n","var keywords = require('../data/colorKeywords')\n\nfunction Color(r, g, b) {\n  this.r = r\n  this.g = g\n  this.b = b\n}\n\nColor.prototype.toString = toString\nfunction toString() {\n  return Color.create(this.r, this.g, this.b)\n}\n\nColor.create = create\nfunction create(r, g, b) {\n  return 'rgb(' + r + ', ' + g + ', ' + b + ')'\n}\n\nObject.keys(keywords).forEach(function (key) {\n  Color[key] = keywords[key]\n})\n\nmodule.exports = Color\n"]}