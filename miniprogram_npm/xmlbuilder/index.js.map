{"version":3,"sources":["index.js","XMLBuilder.js","XMLFragment.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ACHA,AFMA;ACFA,ACHA,AFMA;ACFA,ACHA,AFMA;ACFA,ACHA,AFMA;ACFA,ACHA,AFMA;ACFA,ACHA,AFMA;ACFA,ACHA,AFMA;ACFA,ACHA,AFMA;ACFA,ACHA,AFMA;ACFA,ACHA,AFMA;ACFA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["// Generated by CoffeeScript 1.3.3\n(function() {\n  var XMLBuilder;\n\n  XMLBuilder = require('./XMLBuilder');\n\n  module.exports.create = function(name, xmldec, doctype, options) {\n    if (name != null) {\n      return new XMLBuilder(name, xmldec, doctype, options).root();\n    } else {\n      return new XMLBuilder();\n    }\n  };\n\n}).call(this);\n","// Generated by CoffeeScript 1.3.3\n(function() {\n  var XMLBuilder, XMLFragment,\n    __bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };\n\n  XMLFragment = require('./XMLFragment');\n\n  XMLBuilder = (function() {\n\n    function XMLBuilder(name, xmldec, doctype, options) {\n      this.assertLegalChar = __bind(this.assertLegalChar, this);\n\n      var att, child, _ref;\n      this.children = [];\n      this.rootObject = null;\n      if (this.is(name, 'Object')) {\n        _ref = [name, xmldec], xmldec = _ref[0], doctype = _ref[1];\n        name = null;\n      }\n      if (name != null) {\n        name = '' + name || '';\n        if (xmldec == null) {\n          xmldec = {\n            'version': '1.0'\n          };\n        }\n      }\n      this.allowSurrogateChars = options != null ? options.allowSurrogateChars : void 0;\n      if ((xmldec != null) && !(xmldec.version != null)) {\n        throw new Error(\"Version number is required\");\n      }\n      if (xmldec != null) {\n        xmldec.version = '' + xmldec.version || '';\n        if (!xmldec.version.match(/1\\.[0-9]+/)) {\n          throw new Error(\"Invalid version number: \" + xmldec.version);\n        }\n        att = {\n          version: xmldec.version\n        };\n        if (xmldec.encoding != null) {\n          xmldec.encoding = '' + xmldec.encoding || '';\n          if (!xmldec.encoding.match(/[A-Za-z](?:[A-Za-z0-9._-]|-)*/)) {\n            throw new Error(\"Invalid encoding: \" + xmldec.encoding);\n          }\n          att.encoding = xmldec.encoding;\n        }\n        if (xmldec.standalone != null) {\n          att.standalone = xmldec.standalone ? \"yes\" : \"no\";\n        }\n        child = new XMLFragment(this, '?xml', att);\n        this.children.push(child);\n      }\n      if (doctype != null) {\n        att = {};\n        if (name != null) {\n          att.name = name;\n        }\n        if (doctype.ext != null) {\n          doctype.ext = '' + doctype.ext || '';\n          att.ext = doctype.ext;\n        }\n        child = new XMLFragment(this, '!DOCTYPE', att);\n        this.children.push(child);\n      }\n      if (name != null) {\n        this.begin(name);\n      }\n    }\n\n    XMLBuilder.prototype.begin = function(name, xmldec, doctype) {\n      var doc, root;\n      if (!(name != null)) {\n        throw new Error(\"Root element needs a name\");\n      }\n      if (this.rootObject) {\n        this.children = [];\n        this.rootObject = null;\n      }\n      if (xmldec != null) {\n        doc = new XMLBuilder(name, xmldec, doctype);\n        return doc.root();\n      }\n      name = '' + name || '';\n      root = new XMLFragment(this, name, {});\n      root.isRoot = true;\n      root.documentObject = this;\n      this.children.push(root);\n      this.rootObject = root;\n      return root;\n    };\n\n    XMLBuilder.prototype.root = function() {\n      return this.rootObject;\n    };\n\n    XMLBuilder.prototype.end = function(options) {\n      return toString(options);\n    };\n\n    XMLBuilder.prototype.toString = function(options) {\n      var child, r, _i, _len, _ref;\n      r = '';\n      _ref = this.children;\n      for (_i = 0, _len = _ref.length; _i < _len; _i++) {\n        child = _ref[_i];\n        r += child.toString(options);\n      }\n      return r;\n    };\n\n    XMLBuilder.prototype.is = function(obj, type) {\n      var clas;\n      clas = Object.prototype.toString.call(obj).slice(8, -1);\n      return (obj != null) && clas === type;\n    };\n\n    XMLBuilder.prototype.assertLegalChar = function(str) {\n      var chars, chr;\n      if (this.allowSurrogateChars) {\n        chars = /[\\u0000-\\u0008\\u000B-\\u000C\\u000E-\\u001F\\uFFFE-\\uFFFF]/;\n      } else {\n        chars = /[\\u0000-\\u0008\\u000B-\\u000C\\u000E-\\u001F\\uD800-\\uDFFF\\uFFFE-\\uFFFF]/;\n      }\n      chr = str.match(chars);\n      if (chr) {\n        throw new Error(\"Invalid character (\" + chr + \") in string: \" + str + \" at index \" + chr.index);\n      }\n    };\n\n    return XMLBuilder;\n\n  })();\n\n  module.exports = XMLBuilder;\n\n}).call(this);\n","// Generated by CoffeeScript 1.3.3\n(function() {\n  var XMLFragment,\n    __hasProp = {}.hasOwnProperty;\n\n  XMLFragment = (function() {\n\n    function XMLFragment(parent, name, attributes, text) {\n      this.isRoot = false;\n      this.documentObject = null;\n      this.parent = parent;\n      this.name = name;\n      this.attributes = attributes;\n      this.value = text;\n      this.children = [];\n      this.assertLegalChar = parent.assertLegalChar;\n    }\n\n    XMLFragment.prototype.element = function(name, attributes, text) {\n      var child, key, val, _ref, _ref1;\n      if (!(name != null)) {\n        throw new Error(\"Missing element name\");\n      }\n      name = '' + name || '';\n      this.assertLegalChar(name);\n      if (attributes == null) {\n        attributes = {};\n      }\n      if (this.is(attributes, 'String') && this.is(text, 'Object')) {\n        _ref = [text, attributes], attributes = _ref[0], text = _ref[1];\n      } else if (this.is(attributes, 'String')) {\n        _ref1 = [{}, attributes], attributes = _ref1[0], text = _ref1[1];\n      }\n      for (key in attributes) {\n        if (!__hasProp.call(attributes, key)) continue;\n        val = attributes[key];\n        val = '' + val || '';\n        attributes[key] = this.escape(val);\n      }\n      child = new XMLFragment(this, name, attributes);\n      if (text != null) {\n        text = '' + text || '';\n        text = this.escape(text);\n        this.assertLegalChar(text);\n        child.raw(text);\n      }\n      this.children.push(child);\n      return child;\n    };\n\n    XMLFragment.prototype.insertBefore = function(name, attributes, text) {\n      var child, i, key, val, _ref, _ref1;\n      if (this.isRoot) {\n        throw new Error(\"Cannot insert elements at root level\");\n      }\n      if (!(name != null)) {\n        throw new Error(\"Missing element name\");\n      }\n      name = '' + name || '';\n      this.assertLegalChar(name);\n      if (attributes == null) {\n        attributes = {};\n      }\n      if (this.is(attributes, 'String') && this.is(text, 'Object')) {\n        _ref = [text, attributes], attributes = _ref[0], text = _ref[1];\n      } else if (this.is(attributes, 'String')) {\n        _ref1 = [{}, attributes], attributes = _ref1[0], text = _ref1[1];\n      }\n      for (key in attributes) {\n        if (!__hasProp.call(attributes, key)) continue;\n        val = attributes[key];\n        val = '' + val || '';\n        attributes[key] = this.escape(val);\n      }\n      child = new XMLFragment(this.parent, name, attributes);\n      if (text != null) {\n        text = '' + text || '';\n        text = this.escape(text);\n        this.assertLegalChar(text);\n        child.raw(text);\n      }\n      i = this.parent.children.indexOf(this);\n      this.parent.children.splice(i, 0, child);\n      return child;\n    };\n\n    XMLFragment.prototype.insertAfter = function(name, attributes, text) {\n      var child, i, key, val, _ref, _ref1;\n      if (this.isRoot) {\n        throw new Error(\"Cannot insert elements at root level\");\n      }\n      if (!(name != null)) {\n        throw new Error(\"Missing element name\");\n      }\n      name = '' + name || '';\n      this.assertLegalChar(name);\n      if (attributes == null) {\n        attributes = {};\n      }\n      if (this.is(attributes, 'String') && this.is(text, 'Object')) {\n        _ref = [text, attributes], attributes = _ref[0], text = _ref[1];\n      } else if (this.is(attributes, 'String')) {\n        _ref1 = [{}, attributes], attributes = _ref1[0], text = _ref1[1];\n      }\n      for (key in attributes) {\n        if (!__hasProp.call(attributes, key)) continue;\n        val = attributes[key];\n        val = '' + val || '';\n        attributes[key] = this.escape(val);\n      }\n      child = new XMLFragment(this.parent, name, attributes);\n      if (text != null) {\n        text = '' + text || '';\n        text = this.escape(text);\n        this.assertLegalChar(text);\n        child.raw(text);\n      }\n      i = this.parent.children.indexOf(this);\n      this.parent.children.splice(i + 1, 0, child);\n      return child;\n    };\n\n    XMLFragment.prototype.remove = function() {\n      var i, _ref;\n      if (this.isRoot) {\n        throw new Error(\"Cannot remove the root element\");\n      }\n      i = this.parent.children.indexOf(this);\n      [].splice.apply(this.parent.children, [i, i - i + 1].concat(_ref = [])), _ref;\n      return this.parent;\n    };\n\n    XMLFragment.prototype.text = function(value) {\n      var child;\n      if (!(value != null)) {\n        throw new Error(\"Missing element text\");\n      }\n      value = '' + value || '';\n      value = this.escape(value);\n      this.assertLegalChar(value);\n      child = new XMLFragment(this, '', {}, value);\n      this.children.push(child);\n      return this;\n    };\n\n    XMLFragment.prototype.cdata = function(value) {\n      var child;\n      if (!(value != null)) {\n        throw new Error(\"Missing CDATA text\");\n      }\n      value = '' + value || '';\n      this.assertLegalChar(value);\n      if (value.match(/]]>/)) {\n        throw new Error(\"Invalid CDATA text: \" + value);\n      }\n      child = new XMLFragment(this, '', {}, '<![CDATA[' + value + ']]>');\n      this.children.push(child);\n      return this;\n    };\n\n    XMLFragment.prototype.comment = function(value) {\n      var child;\n      if (!(value != null)) {\n        throw new Error(\"Missing comment text\");\n      }\n      value = '' + value || '';\n      value = this.escape(value);\n      this.assertLegalChar(value);\n      if (value.match(/--/)) {\n        throw new Error(\"Comment text cannot contain double-hypen: \" + value);\n      }\n      child = new XMLFragment(this, '', {}, '<!-- ' + value + ' -->');\n      this.children.push(child);\n      return this;\n    };\n\n    XMLFragment.prototype.raw = function(value) {\n      var child;\n      if (!(value != null)) {\n        throw new Error(\"Missing raw text\");\n      }\n      value = '' + value || '';\n      child = new XMLFragment(this, '', {}, value);\n      this.children.push(child);\n      return this;\n    };\n\n    XMLFragment.prototype.up = function() {\n      if (this.isRoot) {\n        throw new Error(\"This node has no parent. Use doc() if you need to get the document object.\");\n      }\n      return this.parent;\n    };\n\n    XMLFragment.prototype.root = function() {\n      var child;\n      if (this.isRoot) {\n        return this;\n      }\n      child = this.parent;\n      while (!child.isRoot) {\n        child = child.parent;\n      }\n      return child;\n    };\n\n    XMLFragment.prototype.document = function() {\n      return this.root().documentObject;\n    };\n\n    XMLFragment.prototype.end = function(options) {\n      return this.document().toString(options);\n    };\n\n    XMLFragment.prototype.prev = function() {\n      var i;\n      if (this.isRoot) {\n        throw new Error(\"Root node has no siblings\");\n      }\n      i = this.parent.children.indexOf(this);\n      if (i < 1) {\n        throw new Error(\"Already at the first node\");\n      }\n      return this.parent.children[i - 1];\n    };\n\n    XMLFragment.prototype.next = function() {\n      var i;\n      if (this.isRoot) {\n        throw new Error(\"Root node has no siblings\");\n      }\n      i = this.parent.children.indexOf(this);\n      if (i === -1 || i === this.parent.children.length - 1) {\n        throw new Error(\"Already at the last node\");\n      }\n      return this.parent.children[i + 1];\n    };\n\n    XMLFragment.prototype.clone = function(deep) {\n      var clonedSelf;\n      clonedSelf = new XMLFragment(this.parent, this.name, this.attributes, this.value);\n      if (deep) {\n        this.children.forEach(function(child) {\n          var clonedChild;\n          clonedChild = child.clone(deep);\n          clonedChild.parent = clonedSelf;\n          return clonedSelf.children.push(clonedChild);\n        });\n      }\n      return clonedSelf;\n    };\n\n    XMLFragment.prototype.importXMLBuilder = function(xmlbuilder) {\n      var clonedRoot;\n      clonedRoot = xmlbuilder.root().clone(true);\n      clonedRoot.parent = this;\n      this.children.push(clonedRoot);\n      clonedRoot.isRoot = false;\n      return this;\n    };\n\n    XMLFragment.prototype.attribute = function(name, value) {\n      var _ref;\n      if (!(name != null)) {\n        throw new Error(\"Missing attribute name\");\n      }\n      if (!(value != null)) {\n        throw new Error(\"Missing attribute value\");\n      }\n      name = '' + name || '';\n      value = '' + value || '';\n      if ((_ref = this.attributes) == null) {\n        this.attributes = {};\n      }\n      this.attributes[name] = this.escape(value);\n      return this;\n    };\n\n    XMLFragment.prototype.removeAttribute = function(name) {\n      if (!(name != null)) {\n        throw new Error(\"Missing attribute name\");\n      }\n      name = '' + name || '';\n      delete this.attributes[name];\n      return this;\n    };\n\n    XMLFragment.prototype.toString = function(options, level) {\n      var attName, attValue, child, indent, newline, pretty, r, space, _i, _len, _ref, _ref1;\n      pretty = (options != null) && options.pretty || false;\n      indent = (options != null) && options.indent || '  ';\n      newline = (options != null) && options.newline || '\\n';\n      level || (level = 0);\n      space = new Array(level + 1).join(indent);\n      r = '';\n      if (pretty) {\n        r += space;\n      }\n      if (!(this.value != null)) {\n        r += '<' + this.name;\n      } else {\n        r += '' + this.value;\n      }\n      _ref = this.attributes;\n      for (attName in _ref) {\n        if (!__hasProp.call(_ref, attName)) continue;\n        attValue = _ref[attName];\n        if (this.name === '!DOCTYPE') {\n          r += ' ' + attValue;\n        } else {\n          r += ' ' + attName + '=\"' + attValue + '\"';\n        }\n      }\n      if (this.children.length === 0) {\n        if (!(this.value != null)) {\n          r += this.name === '?xml' ? '?>' : this.name === '!DOCTYPE' ? '>' : '/>';\n        }\n        if (pretty) {\n          r += newline;\n        }\n      } else if (pretty && this.children.length === 1 && (this.children[0].value != null)) {\n        r += '>';\n        r += this.children[0].value;\n        r += '</' + this.name + '>';\n        r += newline;\n      } else {\n        r += '>';\n        if (pretty) {\n          r += newline;\n        }\n        _ref1 = this.children;\n        for (_i = 0, _len = _ref1.length; _i < _len; _i++) {\n          child = _ref1[_i];\n          r += child.toString(options, level + 1);\n        }\n        if (pretty) {\n          r += space;\n        }\n        r += '</' + this.name + '>';\n        if (pretty) {\n          r += newline;\n        }\n      }\n      return r;\n    };\n\n    XMLFragment.prototype.escape = function(str) {\n      return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/'/g, '&apos;').replace(/\"/g, '&quot;');\n    };\n\n    XMLFragment.prototype.is = function(obj, type) {\n      var clas;\n      clas = Object.prototype.toString.call(obj).slice(8, -1);\n      return (obj != null) && clas === type;\n    };\n\n    XMLFragment.prototype.ele = function(name, attributes, text) {\n      return this.element(name, attributes, text);\n    };\n\n    XMLFragment.prototype.txt = function(value) {\n      return this.text(value);\n    };\n\n    XMLFragment.prototype.dat = function(value) {\n      return this.cdata(value);\n    };\n\n    XMLFragment.prototype.att = function(name, value) {\n      return this.attribute(name, value);\n    };\n\n    XMLFragment.prototype.com = function(value) {\n      return this.comment(value);\n    };\n\n    XMLFragment.prototype.doc = function() {\n      return this.document();\n    };\n\n    XMLFragment.prototype.e = function(name, attributes, text) {\n      return this.element(name, attributes, text);\n    };\n\n    XMLFragment.prototype.t = function(value) {\n      return this.text(value);\n    };\n\n    XMLFragment.prototype.d = function(value) {\n      return this.cdata(value);\n    };\n\n    XMLFragment.prototype.a = function(name, value) {\n      return this.attribute(name, value);\n    };\n\n    XMLFragment.prototype.c = function(value) {\n      return this.comment(value);\n    };\n\n    XMLFragment.prototype.r = function(value) {\n      return this.raw(value);\n    };\n\n    XMLFragment.prototype.u = function() {\n      return this.up();\n    };\n\n    return XMLFragment;\n\n  })();\n\n  module.exports = XMLFragment;\n\n}).call(this);\n"]}